// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/microservices/profile"
	"2021_2_LostPointer/internal/microservices/profile/proto"
	"sync"
)

// Ensure, that MockUserSettingsStorage does implement profile.UserSettingsStorage.
// If this is not the case, regenerate this file with moq.
var _ profile.UserSettingsStorage = &MockUserSettingsStorage{}

// MockUserSettingsStorage is a mock implementation of profile.UserSettingsStorage.
//
// 	func TestSomethingThatUsesUserSettingsStorage(t *testing.T) {
//
// 		// make and configure a mocked profile.UserSettingsStorage
// 		mockedUserSettingsStorage := &MockUserSettingsStorage{
// 			CheckPasswordByUserIDFunc: func(n int64, s string) (bool, error) {
// 				panic("mock out the CheckPasswordByUserID method")
// 			},
// 			GetSettingsFunc: func(n int64) (*proto.UserSettings, error) {
// 				panic("mock out the GetSettings method")
// 			},
// 			IsEmailUniqueFunc: func(s string) (bool, error) {
// 				panic("mock out the IsEmailUnique method")
// 			},
// 			IsNicknameUniqueFunc: func(s string) (bool, error) {
// 				panic("mock out the IsNicknameUnique method")
// 			},
// 			UpdateAvatarFunc: func(n int64, s string) error {
// 				panic("mock out the UpdateAvatar method")
// 			},
// 			UpdateEmailFunc: func(n int64, s string) error {
// 				panic("mock out the UpdateEmail method")
// 			},
// 			UpdateNicknameFunc: func(n int64, s string) error {
// 				panic("mock out the UpdateNickname method")
// 			},
// 			UpdatePasswordFunc: func(n int64, s string) error {
// 				panic("mock out the UpdatePassword method")
// 			},
// 		}
//
// 		// use mockedUserSettingsStorage in code that requires profile.UserSettingsStorage
// 		// and then make assertions.
//
// 	}
type MockUserSettingsStorage struct {
	// CheckPasswordByUserIDFunc mocks the CheckPasswordByUserID method.
	CheckPasswordByUserIDFunc func(n int64, s string) (bool, error)

	// GetSettingsFunc mocks the GetSettings method.
	GetSettingsFunc func(n int64) (*proto.UserSettings, error)

	// IsEmailUniqueFunc mocks the IsEmailUnique method.
	IsEmailUniqueFunc func(s string) (bool, error)

	// IsNicknameUniqueFunc mocks the IsNicknameUnique method.
	IsNicknameUniqueFunc func(s string) (bool, error)

	// UpdateAvatarFunc mocks the UpdateAvatar method.
	UpdateAvatarFunc func(n int64, s string) error

	// UpdateEmailFunc mocks the UpdateEmail method.
	UpdateEmailFunc func(n int64, s string) error

	// UpdateNicknameFunc mocks the UpdateNickname method.
	UpdateNicknameFunc func(n int64, s string) error

	// UpdatePasswordFunc mocks the UpdatePassword method.
	UpdatePasswordFunc func(n int64, s string) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckPasswordByUserID holds details about calls to the CheckPasswordByUserID method.
		CheckPasswordByUserID []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
		// GetSettings holds details about calls to the GetSettings method.
		GetSettings []struct {
			// N is the n argument value.
			N int64
		}
		// IsEmailUnique holds details about calls to the IsEmailUnique method.
		IsEmailUnique []struct {
			// S is the s argument value.
			S string
		}
		// IsNicknameUnique holds details about calls to the IsNicknameUnique method.
		IsNicknameUnique []struct {
			// S is the s argument value.
			S string
		}
		// UpdateAvatar holds details about calls to the UpdateAvatar method.
		UpdateAvatar []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
		// UpdateEmail holds details about calls to the UpdateEmail method.
		UpdateEmail []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
		// UpdateNickname holds details about calls to the UpdateNickname method.
		UpdateNickname []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
		// UpdatePassword holds details about calls to the UpdatePassword method.
		UpdatePassword []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
	}
	lockCheckPasswordByUserID sync.RWMutex
	lockGetSettings           sync.RWMutex
	lockIsEmailUnique         sync.RWMutex
	lockIsNicknameUnique      sync.RWMutex
	lockUpdateAvatar          sync.RWMutex
	lockUpdateEmail           sync.RWMutex
	lockUpdateNickname        sync.RWMutex
	lockUpdatePassword        sync.RWMutex
}

// CheckPasswordByUserID calls CheckPasswordByUserIDFunc.
func (mock *MockUserSettingsStorage) CheckPasswordByUserID(n int64, s string) (bool, error) {
	if mock.CheckPasswordByUserIDFunc == nil {
		panic("MockUserSettingsStorage.CheckPasswordByUserIDFunc: method is nil but UserSettingsStorage.CheckPasswordByUserID was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockCheckPasswordByUserID.Lock()
	mock.calls.CheckPasswordByUserID = append(mock.calls.CheckPasswordByUserID, callInfo)
	mock.lockCheckPasswordByUserID.Unlock()
	return mock.CheckPasswordByUserIDFunc(n, s)
}

// CheckPasswordByUserIDCalls gets all the calls that were made to CheckPasswordByUserID.
// Check the length with:
//     len(mockedUserSettingsStorage.CheckPasswordByUserIDCalls())
func (mock *MockUserSettingsStorage) CheckPasswordByUserIDCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockCheckPasswordByUserID.RLock()
	calls = mock.calls.CheckPasswordByUserID
	mock.lockCheckPasswordByUserID.RUnlock()
	return calls
}

// GetSettings calls GetSettingsFunc.
func (mock *MockUserSettingsStorage) GetSettings(n int64) (*proto.UserSettings, error) {
	if mock.GetSettingsFunc == nil {
		panic("MockUserSettingsStorage.GetSettingsFunc: method is nil but UserSettingsStorage.GetSettings was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetSettings.Lock()
	mock.calls.GetSettings = append(mock.calls.GetSettings, callInfo)
	mock.lockGetSettings.Unlock()
	return mock.GetSettingsFunc(n)
}

// GetSettingsCalls gets all the calls that were made to GetSettings.
// Check the length with:
//     len(mockedUserSettingsStorage.GetSettingsCalls())
func (mock *MockUserSettingsStorage) GetSettingsCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetSettings.RLock()
	calls = mock.calls.GetSettings
	mock.lockGetSettings.RUnlock()
	return calls
}

// IsEmailUnique calls IsEmailUniqueFunc.
func (mock *MockUserSettingsStorage) IsEmailUnique(s string) (bool, error) {
	if mock.IsEmailUniqueFunc == nil {
		panic("MockUserSettingsStorage.IsEmailUniqueFunc: method is nil but UserSettingsStorage.IsEmailUnique was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockIsEmailUnique.Lock()
	mock.calls.IsEmailUnique = append(mock.calls.IsEmailUnique, callInfo)
	mock.lockIsEmailUnique.Unlock()
	return mock.IsEmailUniqueFunc(s)
}

// IsEmailUniqueCalls gets all the calls that were made to IsEmailUnique.
// Check the length with:
//     len(mockedUserSettingsStorage.IsEmailUniqueCalls())
func (mock *MockUserSettingsStorage) IsEmailUniqueCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockIsEmailUnique.RLock()
	calls = mock.calls.IsEmailUnique
	mock.lockIsEmailUnique.RUnlock()
	return calls
}

// IsNicknameUnique calls IsNicknameUniqueFunc.
func (mock *MockUserSettingsStorage) IsNicknameUnique(s string) (bool, error) {
	if mock.IsNicknameUniqueFunc == nil {
		panic("MockUserSettingsStorage.IsNicknameUniqueFunc: method is nil but UserSettingsStorage.IsNicknameUnique was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockIsNicknameUnique.Lock()
	mock.calls.IsNicknameUnique = append(mock.calls.IsNicknameUnique, callInfo)
	mock.lockIsNicknameUnique.Unlock()
	return mock.IsNicknameUniqueFunc(s)
}

// IsNicknameUniqueCalls gets all the calls that were made to IsNicknameUnique.
// Check the length with:
//     len(mockedUserSettingsStorage.IsNicknameUniqueCalls())
func (mock *MockUserSettingsStorage) IsNicknameUniqueCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockIsNicknameUnique.RLock()
	calls = mock.calls.IsNicknameUnique
	mock.lockIsNicknameUnique.RUnlock()
	return calls
}

// UpdateAvatar calls UpdateAvatarFunc.
func (mock *MockUserSettingsStorage) UpdateAvatar(n int64, s string) error {
	if mock.UpdateAvatarFunc == nil {
		panic("MockUserSettingsStorage.UpdateAvatarFunc: method is nil but UserSettingsStorage.UpdateAvatar was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockUpdateAvatar.Lock()
	mock.calls.UpdateAvatar = append(mock.calls.UpdateAvatar, callInfo)
	mock.lockUpdateAvatar.Unlock()
	return mock.UpdateAvatarFunc(n, s)
}

// UpdateAvatarCalls gets all the calls that were made to UpdateAvatar.
// Check the length with:
//     len(mockedUserSettingsStorage.UpdateAvatarCalls())
func (mock *MockUserSettingsStorage) UpdateAvatarCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockUpdateAvatar.RLock()
	calls = mock.calls.UpdateAvatar
	mock.lockUpdateAvatar.RUnlock()
	return calls
}

// UpdateEmail calls UpdateEmailFunc.
func (mock *MockUserSettingsStorage) UpdateEmail(n int64, s string) error {
	if mock.UpdateEmailFunc == nil {
		panic("MockUserSettingsStorage.UpdateEmailFunc: method is nil but UserSettingsStorage.UpdateEmail was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockUpdateEmail.Lock()
	mock.calls.UpdateEmail = append(mock.calls.UpdateEmail, callInfo)
	mock.lockUpdateEmail.Unlock()
	return mock.UpdateEmailFunc(n, s)
}

// UpdateEmailCalls gets all the calls that were made to UpdateEmail.
// Check the length with:
//     len(mockedUserSettingsStorage.UpdateEmailCalls())
func (mock *MockUserSettingsStorage) UpdateEmailCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockUpdateEmail.RLock()
	calls = mock.calls.UpdateEmail
	mock.lockUpdateEmail.RUnlock()
	return calls
}

// UpdateNickname calls UpdateNicknameFunc.
func (mock *MockUserSettingsStorage) UpdateNickname(n int64, s string) error {
	if mock.UpdateNicknameFunc == nil {
		panic("MockUserSettingsStorage.UpdateNicknameFunc: method is nil but UserSettingsStorage.UpdateNickname was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockUpdateNickname.Lock()
	mock.calls.UpdateNickname = append(mock.calls.UpdateNickname, callInfo)
	mock.lockUpdateNickname.Unlock()
	return mock.UpdateNicknameFunc(n, s)
}

// UpdateNicknameCalls gets all the calls that were made to UpdateNickname.
// Check the length with:
//     len(mockedUserSettingsStorage.UpdateNicknameCalls())
func (mock *MockUserSettingsStorage) UpdateNicknameCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockUpdateNickname.RLock()
	calls = mock.calls.UpdateNickname
	mock.lockUpdateNickname.RUnlock()
	return calls
}

// UpdatePassword calls UpdatePasswordFunc.
func (mock *MockUserSettingsStorage) UpdatePassword(n int64, s string) error {
	if mock.UpdatePasswordFunc == nil {
		panic("MockUserSettingsStorage.UpdatePasswordFunc: method is nil but UserSettingsStorage.UpdatePassword was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockUpdatePassword.Lock()
	mock.calls.UpdatePassword = append(mock.calls.UpdatePassword, callInfo)
	mock.lockUpdatePassword.Unlock()
	return mock.UpdatePasswordFunc(n, s)
}

// UpdatePasswordCalls gets all the calls that were made to UpdatePassword.
// Check the length with:
//     len(mockedUserSettingsStorage.UpdatePasswordCalls())
func (mock *MockUserSettingsStorage) UpdatePasswordCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockUpdatePassword.RLock()
	calls = mock.calls.UpdatePassword
	mock.lockUpdatePassword.RUnlock()
	return calls
}
