// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/sessions"
	"sync"
)

// Ensure, that MockSessionRepository does implement sessions.SessionRepository.
// If this is not the case, regenerate this file with moq.
var _ sessions.SessionRepository = &MockSessionRepository{}

// MockSessionRepository is a mock implementation of sessions.SessionRepository.
//
// 	func TestSomethingThatUsesSessionRepository(t *testing.T) {
//
// 		// make and configure a mocked sessions.SessionRepository
// 		mockedSessionRepository := &MockSessionRepository{
// 			CreateSessionFunc: func(n int, s string) error {
// 				panic("mock out the CreateSession method")
// 			},
// 			DeleteSessionFunc: func(s string) error {
// 				panic("mock out the DeleteSession method")
// 			},
// 			GetUserIdByCookieFunc: func(s string) (int, error) {
// 				panic("mock out the GetUserIdByCookie method")
// 			},
// 		}
//
// 		// use mockedSessionRepository in code that requires sessions.SessionRepository
// 		// and then make assertions.
//
// 	}
type MockSessionRepository struct {
	// CreateSessionFunc mocks the CreateSession method.
	CreateSessionFunc func(n int, s string) error

	// DeleteSessionFunc mocks the DeleteSession method.
	DeleteSessionFunc func(s string) error

	// GetUserIdByCookieFunc mocks the GetUserIdByCookie method.
	GetUserIdByCookieFunc func(s string) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateSession holds details about calls to the CreateSession method.
		CreateSession []struct {
			// N is the n argument value.
			N int
			// S is the s argument value.
			S string
		}
		// DeleteSession holds details about calls to the DeleteSession method.
		DeleteSession []struct {
			// S is the s argument value.
			S string
		}
		// GetUserIdByCookie holds details about calls to the GetUserIdByCookie method.
		GetUserIdByCookie []struct {
			// S is the s argument value.
			S string
		}
	}
	lockCreateSession     sync.RWMutex
	lockDeleteSession     sync.RWMutex
	lockGetUserIdByCookie sync.RWMutex
}

// CreateSession calls CreateSessionFunc.
func (mock *MockSessionRepository) CreateSession(n int, s string) error {
	if mock.CreateSessionFunc == nil {
		panic("MockSessionRepository.CreateSessionFunc: method is nil but SessionRepository.CreateSession was just called")
	}
	callInfo := struct {
		N int
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockCreateSession.Lock()
	mock.calls.CreateSession = append(mock.calls.CreateSession, callInfo)
	mock.lockCreateSession.Unlock()
	return mock.CreateSessionFunc(n, s)
}

// CreateSessionCalls gets all the calls that were made to CreateSession.
// Check the length with:
//     len(mockedSessionRepository.CreateSessionCalls())
func (mock *MockSessionRepository) CreateSessionCalls() []struct {
	N int
	S string
} {
	var calls []struct {
		N int
		S string
	}
	mock.lockCreateSession.RLock()
	calls = mock.calls.CreateSession
	mock.lockCreateSession.RUnlock()
	return calls
}

// DeleteSession calls DeleteSessionFunc.
func (mock *MockSessionRepository) DeleteSession(s string) error {
	if mock.DeleteSessionFunc == nil {
		panic("MockSessionRepository.DeleteSessionFunc: method is nil but SessionRepository.DeleteSession was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockDeleteSession.Lock()
	mock.calls.DeleteSession = append(mock.calls.DeleteSession, callInfo)
	mock.lockDeleteSession.Unlock()
	return mock.DeleteSessionFunc(s)
}

// DeleteSessionCalls gets all the calls that were made to DeleteSession.
// Check the length with:
//     len(mockedSessionRepository.DeleteSessionCalls())
func (mock *MockSessionRepository) DeleteSessionCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockDeleteSession.RLock()
	calls = mock.calls.DeleteSession
	mock.lockDeleteSession.RUnlock()
	return calls
}

// GetUserIdByCookie calls GetUserIdByCookieFunc.
func (mock *MockSessionRepository) GetUserIdByCookie(s string) (int, error) {
	if mock.GetUserIdByCookieFunc == nil {
		panic("MockSessionRepository.GetUserIdByCookieFunc: method is nil but SessionRepository.GetUserIdByCookie was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetUserIdByCookie.Lock()
	mock.calls.GetUserIdByCookie = append(mock.calls.GetUserIdByCookie, callInfo)
	mock.lockGetUserIdByCookie.Unlock()
	return mock.GetUserIdByCookieFunc(s)
}

// GetUserIdByCookieCalls gets all the calls that were made to GetUserIdByCookie.
// Check the length with:
//     len(mockedSessionRepository.GetUserIdByCookieCalls())
func (mock *MockSessionRepository) GetUserIdByCookieCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetUserIdByCookie.RLock()
	calls = mock.calls.GetUserIdByCookie
	mock.lockGetUserIdByCookie.RUnlock()
	return calls
}
