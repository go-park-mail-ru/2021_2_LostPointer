// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/microservices/authorization/delivery"
	context "context"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// Ensure, that MockSessionCheckerClient does implement delivery.SessionCheckerClient.
// If this is not the case, regenerate this file with moq.
var _ delivery.SessionCheckerClient = &MockSessionCheckerClient{}

// MockSessionCheckerClient is a mock implementation of delivery.SessionCheckerClient.
//
// 	func TestSomethingThatUsesSessionCheckerClient(t *testing.T) {
//
// 		// make and configure a mocked delivery.SessionCheckerClient
// 		mockedSessionCheckerClient := &MockSessionCheckerClient{
// 			DeleteSessionFunc: func(ctx context.Context, in *delivery.SessionData, opts ...grpc.CallOption) (*delivery.Empty, error) {
// 				panic("mock out the DeleteSession method")
// 			},
// 			GetUserBySessionFunc: func(ctx context.Context, in *delivery.SessionData, opts ...grpc.CallOption) (*delivery.UserID, error) {
// 				panic("mock out the GetUserBySession method")
// 			},
// 			SignInFunc: func(ctx context.Context, in *delivery.Auth, opts ...grpc.CallOption) (*delivery.SessionData, error) {
// 				panic("mock out the SignIn method")
// 			},
// 			SignupFunc: func(ctx context.Context, in *delivery.SignUpData, opts ...grpc.CallOption) (*delivery.SessionData, error) {
// 				panic("mock out the Signup method")
// 			},
// 		}
//
// 		// use mockedSessionCheckerClient in code that requires delivery.SessionCheckerClient
// 		// and then make assertions.
//
// 	}
type MockSessionCheckerClient struct {
	// DeleteSessionFunc mocks the DeleteSession method.
	DeleteSessionFunc func(ctx context.Context, in *delivery.SessionData, opts ...grpc.CallOption) (*delivery.Empty, error)

	// GetUserBySessionFunc mocks the GetUserBySession method.
	GetUserBySessionFunc func(ctx context.Context, in *delivery.SessionData, opts ...grpc.CallOption) (*delivery.UserID, error)

	// SignInFunc mocks the SignIn method.
	SignInFunc func(ctx context.Context, in *delivery.Auth, opts ...grpc.CallOption) (*delivery.SessionData, error)

	// SignupFunc mocks the Signup method.
	SignupFunc func(ctx context.Context, in *delivery.SignUpData, opts ...grpc.CallOption) (*delivery.SessionData, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteSession holds details about calls to the DeleteSession method.
		DeleteSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *delivery.SessionData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetUserBySession holds details about calls to the GetUserBySession method.
		GetUserBySession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *delivery.SessionData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// SignIn holds details about calls to the SignIn method.
		SignIn []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *delivery.Auth
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Signup holds details about calls to the Signup method.
		Signup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *delivery.SignUpData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockDeleteSession    sync.RWMutex
	lockGetUserBySession sync.RWMutex
	lockSignIn           sync.RWMutex
	lockSignup           sync.RWMutex
}

// DeleteSession calls DeleteSessionFunc.
func (mock *MockSessionCheckerClient) DeleteSession(ctx context.Context, in *delivery.SessionData, opts ...grpc.CallOption) (*delivery.Empty, error) {
	if mock.DeleteSessionFunc == nil {
		panic("MockSessionCheckerClient.DeleteSessionFunc: method is nil but SessionCheckerClient.DeleteSession was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *delivery.SessionData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeleteSession.Lock()
	mock.calls.DeleteSession = append(mock.calls.DeleteSession, callInfo)
	mock.lockDeleteSession.Unlock()
	return mock.DeleteSessionFunc(ctx, in, opts...)
}

// DeleteSessionCalls gets all the calls that were made to DeleteSession.
// Check the length with:
//     len(mockedSessionCheckerClient.DeleteSessionCalls())
func (mock *MockSessionCheckerClient) DeleteSessionCalls() []struct {
	Ctx  context.Context
	In   *delivery.SessionData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *delivery.SessionData
		Opts []grpc.CallOption
	}
	mock.lockDeleteSession.RLock()
	calls = mock.calls.DeleteSession
	mock.lockDeleteSession.RUnlock()
	return calls
}

// GetUserBySession calls GetUserBySessionFunc.
func (mock *MockSessionCheckerClient) GetUserBySession(ctx context.Context, in *delivery.SessionData, opts ...grpc.CallOption) (*delivery.UserID, error) {
	if mock.GetUserBySessionFunc == nil {
		panic("MockSessionCheckerClient.GetUserBySessionFunc: method is nil but SessionCheckerClient.GetUserBySession was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *delivery.SessionData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetUserBySession.Lock()
	mock.calls.GetUserBySession = append(mock.calls.GetUserBySession, callInfo)
	mock.lockGetUserBySession.Unlock()
	return mock.GetUserBySessionFunc(ctx, in, opts...)
}

// GetUserBySessionCalls gets all the calls that were made to GetUserBySession.
// Check the length with:
//     len(mockedSessionCheckerClient.GetUserBySessionCalls())
func (mock *MockSessionCheckerClient) GetUserBySessionCalls() []struct {
	Ctx  context.Context
	In   *delivery.SessionData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *delivery.SessionData
		Opts []grpc.CallOption
	}
	mock.lockGetUserBySession.RLock()
	calls = mock.calls.GetUserBySession
	mock.lockGetUserBySession.RUnlock()
	return calls
}

// SignIn calls SignInFunc.
func (mock *MockSessionCheckerClient) SignIn(ctx context.Context, in *delivery.Auth, opts ...grpc.CallOption) (*delivery.SessionData, error) {
	if mock.SignInFunc == nil {
		panic("MockSessionCheckerClient.SignInFunc: method is nil but SessionCheckerClient.SignIn was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *delivery.Auth
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSignIn.Lock()
	mock.calls.SignIn = append(mock.calls.SignIn, callInfo)
	mock.lockSignIn.Unlock()
	return mock.SignInFunc(ctx, in, opts...)
}

// SignInCalls gets all the calls that were made to SignIn.
// Check the length with:
//     len(mockedSessionCheckerClient.SignInCalls())
func (mock *MockSessionCheckerClient) SignInCalls() []struct {
	Ctx  context.Context
	In   *delivery.Auth
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *delivery.Auth
		Opts []grpc.CallOption
	}
	mock.lockSignIn.RLock()
	calls = mock.calls.SignIn
	mock.lockSignIn.RUnlock()
	return calls
}

// Signup calls SignupFunc.
func (mock *MockSessionCheckerClient) Signup(ctx context.Context, in *delivery.SignUpData, opts ...grpc.CallOption) (*delivery.SessionData, error) {
	if mock.SignupFunc == nil {
		panic("MockSessionCheckerClient.SignupFunc: method is nil but SessionCheckerClient.Signup was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *delivery.SignUpData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSignup.Lock()
	mock.calls.Signup = append(mock.calls.Signup, callInfo)
	mock.lockSignup.Unlock()
	return mock.SignupFunc(ctx, in, opts...)
}

// SignupCalls gets all the calls that were made to Signup.
// Check the length with:
//     len(mockedSessionCheckerClient.SignupCalls())
func (mock *MockSessionCheckerClient) SignupCalls() []struct {
	Ctx  context.Context
	In   *delivery.SignUpData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *delivery.SignUpData
		Opts []grpc.CallOption
	}
	mock.lockSignup.RLock()
	calls = mock.calls.Signup
	mock.lockSignup.RUnlock()
	return calls
}
