// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3b1bf41aDecode20212LostPointerInternalModels(in *jlexer.Lexer, out *UserPlaylists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playlists":
			if in.IsNull() {
				in.Skip()
				out.Playlists = nil
			} else {
				in.Delim('[')
				if out.Playlists == nil {
					if !in.IsDelim(']') {
						out.Playlists = make([]UserPlaylist, 0, 1)
					} else {
						out.Playlists = []UserPlaylist{}
					}
				} else {
					out.Playlists = (out.Playlists)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UserPlaylist
					(v1).UnmarshalEasyJSON(in)
					out.Playlists = append(out.Playlists, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncode20212LostPointerInternalModels(out *jwriter.Writer, in UserPlaylists) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Playlists) != 0 {
		const prefix string = ",\"playlists\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Playlists {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPlaylists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b1bf41aEncode20212LostPointerInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPlaylists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncode20212LostPointerInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPlaylists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b1bf41aDecode20212LostPointerInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPlaylists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecode20212LostPointerInternalModels(l, v)
}
func easyjson3b1bf41aDecode20212LostPointerInternalModels1(in *jlexer.Lexer, out *UserPlaylist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.PlaylistID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "artwork":
			out.Artwork = string(in.String())
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "is_own":
			out.IsOwn = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncode20212LostPointerInternalModels1(out *jwriter.Writer, in UserPlaylist) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PlaylistID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.PlaylistID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Artwork != "" {
		const prefix string = ",\"artwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artwork))
	}
	if in.IsPublic {
		const prefix string = ",\"is_public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsPublic))
	}
	if in.IsOwn {
		const prefix string = ",\"is_own\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsOwn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPlaylist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b1bf41aEncode20212LostPointerInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPlaylist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncode20212LostPointerInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPlaylist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b1bf41aDecode20212LostPointerInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPlaylist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecode20212LostPointerInternalModels1(l, v)
}
func easyjson3b1bf41aDecode20212LostPointerInternalModels2(in *jlexer.Lexer, out *PlaylistTrack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "track_id":
			out.TrackID = int64(in.Int64())
		case "playlist_id":
			out.PlaylistID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncode20212LostPointerInternalModels2(out *jwriter.Writer, in PlaylistTrack) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TrackID != 0 {
		const prefix string = ",\"track_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.TrackID))
	}
	if in.PlaylistID != 0 {
		const prefix string = ",\"playlist_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PlaylistID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistTrack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b1bf41aEncode20212LostPointerInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistTrack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncode20212LostPointerInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistTrack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b1bf41aDecode20212LostPointerInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistTrack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecode20212LostPointerInternalModels2(l, v)
}
func easyjson3b1bf41aDecode20212LostPointerInternalModels3(in *jlexer.Lexer, out *PlaylistPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "artwork":
			out.Artwork = string(in.String())
		case "artwork_color":
			out.ArtworkColor = string(in.String())
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]Track, 0, 0)
					} else {
						out.Tracks = []Track{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Track
					(v4).UnmarshalEasyJSON(in)
					out.Tracks = append(out.Tracks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "is_own":
			out.IsOwn = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncode20212LostPointerInternalModels3(out *jwriter.Writer, in PlaylistPage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Artwork != "" {
		const prefix string = ",\"artwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artwork))
	}
	if in.ArtworkColor != "" {
		const prefix string = ",\"artwork_color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArtworkColor))
	}
	if len(in.Tracks) != 0 {
		const prefix string = ",\"tracks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Tracks {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsPublic {
		const prefix string = ",\"is_public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsPublic))
	}
	if in.IsOwn {
		const prefix string = ",\"is_own\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsOwn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b1bf41aEncode20212LostPointerInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncode20212LostPointerInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b1bf41aDecode20212LostPointerInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecode20212LostPointerInternalModels3(l, v)
}
func easyjson3b1bf41aDecode20212LostPointerInternalModels4(in *jlexer.Lexer, out *PlaylistID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncode20212LostPointerInternalModels4(out *jwriter.Writer, in PlaylistID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b1bf41aEncode20212LostPointerInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncode20212LostPointerInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b1bf41aDecode20212LostPointerInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecode20212LostPointerInternalModels4(l, v)
}
func easyjson3b1bf41aDecode20212LostPointerInternalModels5(in *jlexer.Lexer, out *PlaylistArtworkColor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "artwork_color":
			out.ArtworkColor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncode20212LostPointerInternalModels5(out *jwriter.Writer, in PlaylistArtworkColor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"artwork_color\":"
		out.RawString(prefix[1:])
		out.String(string(in.ArtworkColor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistArtworkColor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b1bf41aEncode20212LostPointerInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistArtworkColor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncode20212LostPointerInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistArtworkColor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b1bf41aDecode20212LostPointerInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistArtworkColor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecode20212LostPointerInternalModels5(l, v)
}
