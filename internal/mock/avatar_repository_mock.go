// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/avatars"
	"mime/multipart"
	"sync"
)

// Ensure, that MockAvatarRepository does implement avatars.AvatarRepository.
// If this is not the case, regenerate this file with moq.
var _ avatars.AvatarRepository = &MockAvatarRepository{}

// MockAvatarRepository is a mock implementation of avatars.AvatarRepository.
//
// 	func TestSomethingThatUsesAvatarRepository(t *testing.T) {
//
// 		// make and configure a mocked avatars.AvatarRepository
// 		mockedAvatarRepository := &MockAvatarRepository{
// 			CreateImageFunc: func(fileHeader *multipart.FileHeader) (string, error) {
// 				panic("mock out the CreateImage method")
// 			},
// 			DeleteImageFunc: func(s string) error {
// 				panic("mock out the DeleteImage method")
// 			},
// 		}
//
// 		// use mockedAvatarRepository in code that requires avatars.AvatarRepository
// 		// and then make assertions.
//
// 	}
type MockAvatarRepository struct {
	// CreateImageFunc mocks the CreateImage method.
	CreateImageFunc func(fileHeader *multipart.FileHeader) (string, error)

	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(s string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateImage holds details about calls to the CreateImage method.
		CreateImage []struct {
			// FileHeader is the fileHeader argument value.
			FileHeader *multipart.FileHeader
		}
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// S is the s argument value.
			S string
		}
	}
	lockCreateImage sync.RWMutex
	lockDeleteImage sync.RWMutex
}

// CreateImage calls CreateImageFunc.
func (mock *MockAvatarRepository) CreateImage(fileHeader *multipart.FileHeader) (string, error) {
	if mock.CreateImageFunc == nil {
		panic("MockAvatarRepository.CreateImageFunc: method is nil but AvatarRepository.CreateImage was just called")
	}
	callInfo := struct {
		FileHeader *multipart.FileHeader
	}{
		FileHeader: fileHeader,
	}
	mock.lockCreateImage.Lock()
	mock.calls.CreateImage = append(mock.calls.CreateImage, callInfo)
	mock.lockCreateImage.Unlock()
	return mock.CreateImageFunc(fileHeader)
}

// CreateImageCalls gets all the calls that were made to CreateImage.
// Check the length with:
//     len(mockedAvatarRepository.CreateImageCalls())
func (mock *MockAvatarRepository) CreateImageCalls() []struct {
	FileHeader *multipart.FileHeader
} {
	var calls []struct {
		FileHeader *multipart.FileHeader
	}
	mock.lockCreateImage.RLock()
	calls = mock.calls.CreateImage
	mock.lockCreateImage.RUnlock()
	return calls
}

// DeleteImage calls DeleteImageFunc.
func (mock *MockAvatarRepository) DeleteImage(s string) error {
	if mock.DeleteImageFunc == nil {
		panic("MockAvatarRepository.DeleteImageFunc: method is nil but AvatarRepository.DeleteImage was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	mock.lockDeleteImage.Unlock()
	return mock.DeleteImageFunc(s)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//     len(mockedAvatarRepository.DeleteImageCalls())
func (mock *MockAvatarRepository) DeleteImageCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	mock.lockDeleteImage.RUnlock()
	return calls
}
