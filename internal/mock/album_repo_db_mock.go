// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/album"
	"2021_2_LostPointer/internal/models"
	"sync"
)

// Ensure, that MockAlbumRepository does implement album.AlbumRepository.
// If this is not the case, regenerate this file with moq.
var _ album.AlbumRepository = &MockAlbumRepository{}

// MockAlbumRepository is a mock implementation of album.AlbumRepository.
//
// 	func TestSomethingThatUsesAlbumRepository(t *testing.T) {
//
// 		// make and configure a mocked album.AlbumRepository
// 		mockedAlbumRepository := &MockAlbumRepository{
// 			GetRandomFunc: func(amount int) ([]models.Album, error) {
// 				panic("mock out the GetRandom method")
// 			},
// 		}
//
// 		// use mockedAlbumRepository in code that requires album.AlbumRepository
// 		// and then make assertions.
//
// 	}
type MockAlbumRepository struct {
	// GetRandomFunc mocks the GetRandom method.
	GetRandomFunc func(amount int) ([]models.Album, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRandom holds details about calls to the GetRandom method.
		GetRandom []struct {
			// Amount is the amount argument value.
			Amount int
		}
	}
	lockGetRandom sync.RWMutex
}

// GetRandom calls GetRandomFunc.
func (mock *MockAlbumRepository) GetRandom(amount int) ([]models.Album, error) {
	if mock.GetRandomFunc == nil {
		panic("MockAlbumRepository.GetRandomFunc: method is nil but AlbumRepository.GetRandom was just called")
	}
	callInfo := struct {
		Amount int
	}{
		Amount: amount,
	}
	mock.lockGetRandom.Lock()
	mock.calls.GetRandom = append(mock.calls.GetRandom, callInfo)
	mock.lockGetRandom.Unlock()
	return mock.GetRandomFunc(amount)
}

// GetRandomCalls gets all the calls that were made to GetRandom.
// Check the length with:
//     len(mockedAlbumRepository.GetRandomCalls())
func (mock *MockAlbumRepository) GetRandomCalls() []struct {
	Amount int
} {
	var calls []struct {
		Amount int
	}
	mock.lockGetRandom.RLock()
	calls = mock.calls.GetRandom
	mock.lockGetRandom.RUnlock()
	return calls
}
