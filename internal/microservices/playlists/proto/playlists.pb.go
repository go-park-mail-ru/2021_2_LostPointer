// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: playlists.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePlaylistOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Artwork      string `protobuf:"bytes,3,opt,name=Artwork,proto3" json:"Artwork,omitempty"`
	ArtworkColor string `protobuf:"bytes,4,opt,name=ArtworkColor,proto3" json:"ArtworkColor,omitempty"`
}

func (x *CreatePlaylistOptions) Reset() {
	*x = CreatePlaylistOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlaylistOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlaylistOptions) ProtoMessage() {}

func (x *CreatePlaylistOptions) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlaylistOptions.ProtoReflect.Descriptor instead.
func (*CreatePlaylistOptions) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePlaylistOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CreatePlaylistOptions) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePlaylistOptions) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *CreatePlaylistOptions) GetArtworkColor() string {
	if x != nil {
		return x.ArtworkColor
	}
	return ""
}

type UpdatePlaylistOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID   int64  `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	UserID       int64  `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Artwork      string `protobuf:"bytes,4,opt,name=Artwork,proto3" json:"Artwork,omitempty"`
	ArtworkColor string `protobuf:"bytes,5,opt,name=ArtworkColor,proto3" json:"ArtworkColor,omitempty"`
}

func (x *UpdatePlaylistOptions) Reset() {
	*x = UpdatePlaylistOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlaylistOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaylistOptions) ProtoMessage() {}

func (x *UpdatePlaylistOptions) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaylistOptions.ProtoReflect.Descriptor instead.
func (*UpdatePlaylistOptions) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePlaylistOptions) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

func (x *UpdatePlaylistOptions) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatePlaylistOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdatePlaylistOptions) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *UpdatePlaylistOptions) GetArtworkColor() string {
	if x != nil {
		return x.ArtworkColor
	}
	return ""
}

type DeletePlaylistOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID int64 `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
	UserID     int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *DeletePlaylistOptions) Reset() {
	*x = DeletePlaylistOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlaylistOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlaylistOptions) ProtoMessage() {}

func (x *DeletePlaylistOptions) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlaylistOptions.ProtoReflect.Descriptor instead.
func (*DeletePlaylistOptions) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{2}
}

func (x *DeletePlaylistOptions) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

func (x *DeletePlaylistOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type AddTrackOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID int64 `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
	TrackID    int64 `protobuf:"varint,2,opt,name=TrackID,proto3" json:"TrackID,omitempty"`
	UserID     int64 `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *AddTrackOptions) Reset() {
	*x = AddTrackOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrackOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrackOptions) ProtoMessage() {}

func (x *AddTrackOptions) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrackOptions.ProtoReflect.Descriptor instead.
func (*AddTrackOptions) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{3}
}

func (x *AddTrackOptions) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

func (x *AddTrackOptions) GetTrackID() int64 {
	if x != nil {
		return x.TrackID
	}
	return 0
}

func (x *AddTrackOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type DeleteTrackOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID int64 `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
	TrackID    int64 `protobuf:"varint,2,opt,name=TrackID,proto3" json:"TrackID,omitempty"`
	UserID     int64 `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *DeleteTrackOptions) Reset() {
	*x = DeleteTrackOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrackOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrackOptions) ProtoMessage() {}

func (x *DeleteTrackOptions) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrackOptions.ProtoReflect.Descriptor instead.
func (*DeleteTrackOptions) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteTrackOptions) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

func (x *DeleteTrackOptions) GetTrackID() int64 {
	if x != nil {
		return x.TrackID
	}
	return 0
}

func (x *DeleteTrackOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CreatePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID int64 `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
}

func (x *CreatePlaylistResponse) Reset() {
	*x = CreatePlaylistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlaylistResponse) ProtoMessage() {}

func (x *CreatePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlaylistResponse.ProtoReflect.Descriptor instead.
func (*CreatePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePlaylistResponse) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

type UpdatePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldArtworkFilename string `protobuf:"bytes,1,opt,name=OldArtworkFilename,proto3" json:"OldArtworkFilename,omitempty"`
}

func (x *UpdatePlaylistResponse) Reset() {
	*x = UpdatePlaylistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaylistResponse) ProtoMessage() {}

func (x *UpdatePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaylistResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePlaylistResponse) GetOldArtworkFilename() string {
	if x != nil {
		return x.OldArtworkFilename
	}
	return ""
}

type DeletePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldArtworkFilename string `protobuf:"bytes,1,opt,name=OldArtworkFilename,proto3" json:"OldArtworkFilename,omitempty"`
}

func (x *DeletePlaylistResponse) Reset() {
	*x = DeletePlaylistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlaylistResponse) ProtoMessage() {}

func (x *DeletePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlaylistResponse.ProtoReflect.Descriptor instead.
func (*DeletePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePlaylistResponse) GetOldArtworkFilename() string {
	if x != nil {
		return x.OldArtworkFilename
	}
	return ""
}

type AddTrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTrackResponse) Reset() {
	*x = AddTrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrackResponse) ProtoMessage() {}

func (x *AddTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrackResponse.ProtoReflect.Descriptor instead.
func (*AddTrackResponse) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{8}
}

type DeleteTrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTrackResponse) Reset() {
	*x = DeleteTrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlists_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrackResponse) ProtoMessage() {}

func (x *DeleteTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlists_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrackResponse.ProtoReflect.Descriptor instead.
func (*DeleteTrackResponse) Descriptor() ([]byte, []int) {
	return file_playlists_proto_rawDescGZIP(), []int{9}
}

var File_playlists_proto protoreflect.FileDescriptor

var file_playlists_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x4f, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x63,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x38, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x4f, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x6c, 0x64,
	0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x6c, 0x64,
	0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc9, 0x02, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x17, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x11, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x1f, 0x5a, 0x1d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_playlists_proto_rawDescOnce sync.Once
	file_playlists_proto_rawDescData = file_playlists_proto_rawDesc
)

func file_playlists_proto_rawDescGZIP() []byte {
	file_playlists_proto_rawDescOnce.Do(func() {
		file_playlists_proto_rawDescData = protoimpl.X.CompressGZIP(file_playlists_proto_rawDescData)
	})
	return file_playlists_proto_rawDescData
}

var file_playlists_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_playlists_proto_goTypes = []interface{}{
	(*CreatePlaylistOptions)(nil),  // 0: CreatePlaylistOptions
	(*UpdatePlaylistOptions)(nil),  // 1: UpdatePlaylistOptions
	(*DeletePlaylistOptions)(nil),  // 2: DeletePlaylistOptions
	(*AddTrackOptions)(nil),        // 3: AddTrackOptions
	(*DeleteTrackOptions)(nil),     // 4: DeleteTrackOptions
	(*CreatePlaylistResponse)(nil), // 5: CreatePlaylistResponse
	(*UpdatePlaylistResponse)(nil), // 6: UpdatePlaylistResponse
	(*DeletePlaylistResponse)(nil), // 7: DeletePlaylistResponse
	(*AddTrackResponse)(nil),       // 8: AddTrackResponse
	(*DeleteTrackResponse)(nil),    // 9: DeleteTrackResponse
}
var file_playlists_proto_depIdxs = []int32{
	0, // 0: Playlists.CreatePlaylist:input_type -> CreatePlaylistOptions
	1, // 1: Playlists.UpdatePlaylist:input_type -> UpdatePlaylistOptions
	2, // 2: Playlists.DeletePlaylist:input_type -> DeletePlaylistOptions
	3, // 3: Playlists.AddTrack:input_type -> AddTrackOptions
	4, // 4: Playlists.DeleteTrack:input_type -> DeleteTrackOptions
	5, // 5: Playlists.CreatePlaylist:output_type -> CreatePlaylistResponse
	6, // 6: Playlists.UpdatePlaylist:output_type -> UpdatePlaylistResponse
	7, // 7: Playlists.DeletePlaylist:output_type -> DeletePlaylistResponse
	8, // 8: Playlists.AddTrack:output_type -> AddTrackResponse
	9, // 9: Playlists.DeleteTrack:output_type -> DeleteTrackResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_playlists_proto_init() }
func file_playlists_proto_init() {
	if File_playlists_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_playlists_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlaylistOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlaylistOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlaylistOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrackOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTrackOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlaylistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlaylistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlaylistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlists_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_playlists_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_playlists_proto_goTypes,
		DependencyIndexes: file_playlists_proto_depIdxs,
		MessageInfos:      file_playlists_proto_msgTypes,
	}.Build()
	File_playlists_proto = out.File
	file_playlists_proto_rawDesc = nil
	file_playlists_proto_goTypes = nil
	file_playlists_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlaylistsClient is the client API for Playlists service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlaylistsClient interface {
	CreatePlaylist(ctx context.Context, in *CreatePlaylistOptions, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	UpdatePlaylist(ctx context.Context, in *UpdatePlaylistOptions, opts ...grpc.CallOption) (*UpdatePlaylistResponse, error)
	DeletePlaylist(ctx context.Context, in *DeletePlaylistOptions, opts ...grpc.CallOption) (*DeletePlaylistResponse, error)
	AddTrack(ctx context.Context, in *AddTrackOptions, opts ...grpc.CallOption) (*AddTrackResponse, error)
	DeleteTrack(ctx context.Context, in *DeleteTrackOptions, opts ...grpc.CallOption) (*DeleteTrackResponse, error)
}

type playlistsClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistsClient(cc grpc.ClientConnInterface) PlaylistsClient {
	return &playlistsClient{cc}
}

func (c *playlistsClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistOptions, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, "/Playlists/CreatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsClient) UpdatePlaylist(ctx context.Context, in *UpdatePlaylistOptions, opts ...grpc.CallOption) (*UpdatePlaylistResponse, error) {
	out := new(UpdatePlaylistResponse)
	err := c.cc.Invoke(ctx, "/Playlists/UpdatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsClient) DeletePlaylist(ctx context.Context, in *DeletePlaylistOptions, opts ...grpc.CallOption) (*DeletePlaylistResponse, error) {
	out := new(DeletePlaylistResponse)
	err := c.cc.Invoke(ctx, "/Playlists/DeletePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsClient) AddTrack(ctx context.Context, in *AddTrackOptions, opts ...grpc.CallOption) (*AddTrackResponse, error) {
	out := new(AddTrackResponse)
	err := c.cc.Invoke(ctx, "/Playlists/AddTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsClient) DeleteTrack(ctx context.Context, in *DeleteTrackOptions, opts ...grpc.CallOption) (*DeleteTrackResponse, error) {
	out := new(DeleteTrackResponse)
	err := c.cc.Invoke(ctx, "/Playlists/DeleteTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistsServer is the server API for Playlists service.
type PlaylistsServer interface {
	CreatePlaylist(context.Context, *CreatePlaylistOptions) (*CreatePlaylistResponse, error)
	UpdatePlaylist(context.Context, *UpdatePlaylistOptions) (*UpdatePlaylistResponse, error)
	DeletePlaylist(context.Context, *DeletePlaylistOptions) (*DeletePlaylistResponse, error)
	AddTrack(context.Context, *AddTrackOptions) (*AddTrackResponse, error)
	DeleteTrack(context.Context, *DeleteTrackOptions) (*DeleteTrackResponse, error)
}

// UnimplementedPlaylistsServer can be embedded to have forward compatible implementations.
type UnimplementedPlaylistsServer struct {
}

func (*UnimplementedPlaylistsServer) CreatePlaylist(context.Context, *CreatePlaylistOptions) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (*UnimplementedPlaylistsServer) UpdatePlaylist(context.Context, *UpdatePlaylistOptions) (*UpdatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylist not implemented")
}
func (*UnimplementedPlaylistsServer) DeletePlaylist(context.Context, *DeletePlaylistOptions) (*DeletePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaylist not implemented")
}
func (*UnimplementedPlaylistsServer) AddTrack(context.Context, *AddTrackOptions) (*AddTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrack not implemented")
}
func (*UnimplementedPlaylistsServer) DeleteTrack(context.Context, *DeleteTrackOptions) (*DeleteTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}

func RegisterPlaylistsServer(s *grpc.Server, srv PlaylistsServer) {
	s.RegisterService(&_Playlists_serviceDesc, srv)
}

func _Playlists_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlists/CreatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServer).CreatePlaylist(ctx, req.(*CreatePlaylistOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlists_UpdatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServer).UpdatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlists/UpdatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServer).UpdatePlaylist(ctx, req.(*UpdatePlaylistOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlists_DeletePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaylistOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServer).DeletePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlists/DeletePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServer).DeletePlaylist(ctx, req.(*DeletePlaylistOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlists_AddTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrackOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServer).AddTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlists/AddTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServer).AddTrack(ctx, req.(*AddTrackOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlists_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlists/DeleteTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServer).DeleteTrack(ctx, req.(*DeleteTrackOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _Playlists_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Playlists",
	HandlerType: (*PlaylistsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _Playlists_CreatePlaylist_Handler,
		},
		{
			MethodName: "UpdatePlaylist",
			Handler:    _Playlists_UpdatePlaylist_Handler,
		},
		{
			MethodName: "DeletePlaylist",
			Handler:    _Playlists_DeletePlaylist_Handler,
		},
		{
			MethodName: "AddTrack",
			Handler:    _Playlists_AddTrack_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _Playlists_DeleteTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlists.proto",
}
