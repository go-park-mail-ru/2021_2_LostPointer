// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/microservices/authorization"
	"2021_2_LostPointer/internal/microservices/authorization/proto"
	"sync"
)

// Ensure, that MockAuthStorage does implement authorization.AuthStorage.
// If this is not the case, regenerate this file with moq.
var _ authorization.AuthStorage = &MockAuthStorage{}

// MockAuthStorage is a mock implementation of authorization.AuthStorage.
//
// 	func TestSomethingThatUsesAuthStorage(t *testing.T) {
//
// 		// make and configure a mocked authorization.AuthStorage
// 		mockedAuthStorage := &MockAuthStorage{
// 			CreateSessionFunc: func(n int64, s string) error {
// 				panic("mock out the CreateSession method")
// 			},
// 			CreateUserFunc: func(registerData *proto.RegisterData) (int64, error) {
// 				panic("mock out the CreateUser method")
// 			},
// 			DeleteSessionFunc: func(s string) error {
// 				panic("mock out the DeleteSession method")
// 			},
// 			GetAvatarFunc: func(n int64) (string, error) {
// 				panic("mock out the GetAvatar method")
// 			},
// 			GetUserByCookieFunc: func(s string) (int64, error) {
// 				panic("mock out the GetUserByCookie method")
// 			},
// 			GetUserByPasswordFunc: func(authData *proto.AuthData) (int64, error) {
// 				panic("mock out the GetUserByPassword method")
// 			},
// 			IsEmailUniqueFunc: func(s string) (bool, error) {
// 				panic("mock out the IsEmailUnique method")
// 			},
// 			IsNicknameUniqueFunc: func(s string) (bool, error) {
// 				panic("mock out the IsNicknameUnique method")
// 			},
// 		}
//
// 		// use mockedAuthStorage in code that requires authorization.AuthStorage
// 		// and then make assertions.
//
// 	}
type MockAuthStorage struct {
	// CreateSessionFunc mocks the CreateSession method.
	CreateSessionFunc func(n int64, s string) error

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(registerData *proto.RegisterData) (int64, error)

	// DeleteSessionFunc mocks the DeleteSession method.
	DeleteSessionFunc func(s string) error

	// GetAvatarFunc mocks the GetAvatar method.
	GetAvatarFunc func(n int64) (string, error)

	// GetUserByCookieFunc mocks the GetUserByCookie method.
	GetUserByCookieFunc func(s string) (int64, error)

	// GetUserByPasswordFunc mocks the GetUserByPassword method.
	GetUserByPasswordFunc func(authData *proto.AuthData) (int64, error)

	// IsEmailUniqueFunc mocks the IsEmailUnique method.
	IsEmailUniqueFunc func(s string) (bool, error)

	// IsNicknameUniqueFunc mocks the IsNicknameUnique method.
	IsNicknameUniqueFunc func(s string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateSession holds details about calls to the CreateSession method.
		CreateSession []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// RegisterData is the registerData argument value.
			RegisterData *proto.RegisterData
		}
		// DeleteSession holds details about calls to the DeleteSession method.
		DeleteSession []struct {
			// S is the s argument value.
			S string
		}
		// GetAvatar holds details about calls to the GetAvatar method.
		GetAvatar []struct {
			// N is the n argument value.
			N int64
		}
		// GetUserByCookie holds details about calls to the GetUserByCookie method.
		GetUserByCookie []struct {
			// S is the s argument value.
			S string
		}
		// GetUserByPassword holds details about calls to the GetUserByPassword method.
		GetUserByPassword []struct {
			// AuthData is the authData argument value.
			AuthData *proto.AuthData
		}
		// IsEmailUnique holds details about calls to the IsEmailUnique method.
		IsEmailUnique []struct {
			// S is the s argument value.
			S string
		}
		// IsNicknameUnique holds details about calls to the IsNicknameUnique method.
		IsNicknameUnique []struct {
			// S is the s argument value.
			S string
		}
	}
	lockCreateSession     sync.RWMutex
	lockCreateUser        sync.RWMutex
	lockDeleteSession     sync.RWMutex
	lockGetAvatar         sync.RWMutex
	lockGetUserByCookie   sync.RWMutex
	lockGetUserByPassword sync.RWMutex
	lockIsEmailUnique     sync.RWMutex
	lockIsNicknameUnique  sync.RWMutex
}

// CreateSession calls CreateSessionFunc.
func (mock *MockAuthStorage) CreateSession(n int64, s string) error {
	if mock.CreateSessionFunc == nil {
		panic("MockAuthStorage.CreateSessionFunc: method is nil but AuthStorage.CreateSession was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockCreateSession.Lock()
	mock.calls.CreateSession = append(mock.calls.CreateSession, callInfo)
	mock.lockCreateSession.Unlock()
	return mock.CreateSessionFunc(n, s)
}

// CreateSessionCalls gets all the calls that were made to CreateSession.
// Check the length with:
//     len(mockedAuthStorage.CreateSessionCalls())
func (mock *MockAuthStorage) CreateSessionCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockCreateSession.RLock()
	calls = mock.calls.CreateSession
	mock.lockCreateSession.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *MockAuthStorage) CreateUser(registerData *proto.RegisterData) (int64, error) {
	if mock.CreateUserFunc == nil {
		panic("MockAuthStorage.CreateUserFunc: method is nil but AuthStorage.CreateUser was just called")
	}
	callInfo := struct {
		RegisterData *proto.RegisterData
	}{
		RegisterData: registerData,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(registerData)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedAuthStorage.CreateUserCalls())
func (mock *MockAuthStorage) CreateUserCalls() []struct {
	RegisterData *proto.RegisterData
} {
	var calls []struct {
		RegisterData *proto.RegisterData
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteSession calls DeleteSessionFunc.
func (mock *MockAuthStorage) DeleteSession(s string) error {
	if mock.DeleteSessionFunc == nil {
		panic("MockAuthStorage.DeleteSessionFunc: method is nil but AuthStorage.DeleteSession was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockDeleteSession.Lock()
	mock.calls.DeleteSession = append(mock.calls.DeleteSession, callInfo)
	mock.lockDeleteSession.Unlock()
	return mock.DeleteSessionFunc(s)
}

// DeleteSessionCalls gets all the calls that were made to DeleteSession.
// Check the length with:
//     len(mockedAuthStorage.DeleteSessionCalls())
func (mock *MockAuthStorage) DeleteSessionCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockDeleteSession.RLock()
	calls = mock.calls.DeleteSession
	mock.lockDeleteSession.RUnlock()
	return calls
}

// GetAvatar calls GetAvatarFunc.
func (mock *MockAuthStorage) GetAvatar(n int64) (string, error) {
	if mock.GetAvatarFunc == nil {
		panic("MockAuthStorage.GetAvatarFunc: method is nil but AuthStorage.GetAvatar was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetAvatar.Lock()
	mock.calls.GetAvatar = append(mock.calls.GetAvatar, callInfo)
	mock.lockGetAvatar.Unlock()
	return mock.GetAvatarFunc(n)
}

// GetAvatarCalls gets all the calls that were made to GetAvatar.
// Check the length with:
//     len(mockedAuthStorage.GetAvatarCalls())
func (mock *MockAuthStorage) GetAvatarCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetAvatar.RLock()
	calls = mock.calls.GetAvatar
	mock.lockGetAvatar.RUnlock()
	return calls
}

// GetUserByCookie calls GetUserByCookieFunc.
func (mock *MockAuthStorage) GetUserByCookie(s string) (int64, error) {
	if mock.GetUserByCookieFunc == nil {
		panic("MockAuthStorage.GetUserByCookieFunc: method is nil but AuthStorage.GetUserByCookie was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetUserByCookie.Lock()
	mock.calls.GetUserByCookie = append(mock.calls.GetUserByCookie, callInfo)
	mock.lockGetUserByCookie.Unlock()
	return mock.GetUserByCookieFunc(s)
}

// GetUserByCookieCalls gets all the calls that were made to GetUserByCookie.
// Check the length with:
//     len(mockedAuthStorage.GetUserByCookieCalls())
func (mock *MockAuthStorage) GetUserByCookieCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetUserByCookie.RLock()
	calls = mock.calls.GetUserByCookie
	mock.lockGetUserByCookie.RUnlock()
	return calls
}

// GetUserByPassword calls GetUserByPasswordFunc.
func (mock *MockAuthStorage) GetUserByPassword(authData *proto.AuthData) (int64, error) {
	if mock.GetUserByPasswordFunc == nil {
		panic("MockAuthStorage.GetUserByPasswordFunc: method is nil but AuthStorage.GetUserByPassword was just called")
	}
	callInfo := struct {
		AuthData *proto.AuthData
	}{
		AuthData: authData,
	}
	mock.lockGetUserByPassword.Lock()
	mock.calls.GetUserByPassword = append(mock.calls.GetUserByPassword, callInfo)
	mock.lockGetUserByPassword.Unlock()
	return mock.GetUserByPasswordFunc(authData)
}

// GetUserByPasswordCalls gets all the calls that were made to GetUserByPassword.
// Check the length with:
//     len(mockedAuthStorage.GetUserByPasswordCalls())
func (mock *MockAuthStorage) GetUserByPasswordCalls() []struct {
	AuthData *proto.AuthData
} {
	var calls []struct {
		AuthData *proto.AuthData
	}
	mock.lockGetUserByPassword.RLock()
	calls = mock.calls.GetUserByPassword
	mock.lockGetUserByPassword.RUnlock()
	return calls
}

// IsEmailUnique calls IsEmailUniqueFunc.
func (mock *MockAuthStorage) IsEmailUnique(s string) (bool, error) {
	if mock.IsEmailUniqueFunc == nil {
		panic("MockAuthStorage.IsEmailUniqueFunc: method is nil but AuthStorage.IsEmailUnique was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockIsEmailUnique.Lock()
	mock.calls.IsEmailUnique = append(mock.calls.IsEmailUnique, callInfo)
	mock.lockIsEmailUnique.Unlock()
	return mock.IsEmailUniqueFunc(s)
}

// IsEmailUniqueCalls gets all the calls that were made to IsEmailUnique.
// Check the length with:
//     len(mockedAuthStorage.IsEmailUniqueCalls())
func (mock *MockAuthStorage) IsEmailUniqueCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockIsEmailUnique.RLock()
	calls = mock.calls.IsEmailUnique
	mock.lockIsEmailUnique.RUnlock()
	return calls
}

// IsNicknameUnique calls IsNicknameUniqueFunc.
func (mock *MockAuthStorage) IsNicknameUnique(s string) (bool, error) {
	if mock.IsNicknameUniqueFunc == nil {
		panic("MockAuthStorage.IsNicknameUniqueFunc: method is nil but AuthStorage.IsNicknameUnique was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockIsNicknameUnique.Lock()
	mock.calls.IsNicknameUnique = append(mock.calls.IsNicknameUnique, callInfo)
	mock.lockIsNicknameUnique.Unlock()
	return mock.IsNicknameUniqueFunc(s)
}

// IsNicknameUniqueCalls gets all the calls that were made to IsNicknameUnique.
// Check the length with:
//     len(mockedAuthStorage.IsNicknameUniqueCalls())
func (mock *MockAuthStorage) IsNicknameUniqueCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockIsNicknameUnique.RLock()
	calls = mock.calls.IsNicknameUnique
	mock.lockIsNicknameUnique.RUnlock()
	return calls
}
