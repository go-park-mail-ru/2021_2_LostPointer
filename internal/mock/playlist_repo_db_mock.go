// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/models"
	"2021_2_LostPointer/internal/playlist"
	"sync"
)

// Ensure, that MockPlayListRepository does implement playlist.PlaylistRepository.
// If this is not the case, regenerate this file with moq.
var _ playlist.PlaylistRepository = &MockPlayListRepository{}

// MockPlayListRepository is a mock implementation of playlist.PlaylistRepository.
//
// 	func TestSomethingThatUsesPlaylistRepository(t *testing.T) {
//
// 		// make and configure a mocked playlist.PlaylistRepository
// 		mockedPlaylistRepository := &MockPlayListRepository{
// 			GetFunc: func(amount int, id int) ([]models.Playlist, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedPlaylistRepository in code that requires playlist.PlaylistRepository
// 		// and then make assertions.
//
// 	}
type MockPlayListRepository struct {
	// GetFunc mocks the Get method.
	GetFunc func(amount int, id int) ([]models.Playlist, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Amount is the amount argument value.
			Amount int
			// ID is the id argument value.
			ID int
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *MockPlayListRepository) Get(amount int, id int) ([]models.Playlist, error) {
	if mock.GetFunc == nil {
		panic("MockPlayListRepository.GetFunc: method is nil but PlaylistRepository.Get was just called")
	}
	callInfo := struct {
		Amount int
		ID     int
	}{
		Amount: amount,
		ID:     id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(amount, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPlaylistRepository.GetCalls())
func (mock *MockPlayListRepository) GetCalls() []struct {
	Amount int
	ID     int
} {
	var calls []struct {
		Amount int
		ID     int
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
