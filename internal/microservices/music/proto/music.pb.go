// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: music.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RandomTracksOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       int64 `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	UserID       int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsAuthorized bool  `protobuf:"varint,3,opt,name=IsAuthorized,proto3" json:"IsAuthorized,omitempty"`
}

func (x *RandomTracksOptions) Reset() {
	*x = RandomTracksOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomTracksOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomTracksOptions) ProtoMessage() {}

func (x *RandomTracksOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomTracksOptions.ProtoReflect.Descriptor instead.
func (*RandomTracksOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{0}
}

func (x *RandomTracksOptions) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RandomTracksOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *RandomTracksOptions) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

type RandomAlbumsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount int64 `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *RandomAlbumsOptions) Reset() {
	*x = RandomAlbumsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomAlbumsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomAlbumsOptions) ProtoMessage() {}

func (x *RandomAlbumsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomAlbumsOptions.ProtoReflect.Descriptor instead.
func (*RandomAlbumsOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{1}
}

func (x *RandomAlbumsOptions) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type RandomArtistsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount int64 `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *RandomArtistsOptions) Reset() {
	*x = RandomArtistsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomArtistsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomArtistsOptions) ProtoMessage() {}

func (x *RandomArtistsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomArtistsOptions.ProtoReflect.Descriptor instead.
func (*RandomArtistsOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{2}
}

func (x *RandomArtistsOptions) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type IncrementListenCountOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *IncrementListenCountOptions) Reset() {
	*x = IncrementListenCountOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementListenCountOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementListenCountOptions) ProtoMessage() {}

func (x *IncrementListenCountOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementListenCountOptions.ProtoReflect.Descriptor instead.
func (*IncrementListenCountOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{3}
}

func (x *IncrementListenCountOptions) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ArtistProfileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistID     int64 `protobuf:"varint,1,opt,name=ArtistID,proto3" json:"ArtistID,omitempty"`
	UserID       int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsAuthorized bool  `protobuf:"varint,3,opt,name=IsAuthorized,proto3" json:"IsAuthorized,omitempty"`
}

func (x *ArtistProfileOptions) Reset() {
	*x = ArtistProfileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistProfileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistProfileOptions) ProtoMessage() {}

func (x *ArtistProfileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistProfileOptions.ProtoReflect.Descriptor instead.
func (*ArtistProfileOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{4}
}

func (x *ArtistProfileOptions) GetArtistID() int64 {
	if x != nil {
		return x.ArtistID
	}
	return 0
}

func (x *ArtistProfileOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ArtistProfileOptions) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

type AlbumPageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumID      int64 `protobuf:"varint,1,opt,name=AlbumID,proto3" json:"AlbumID,omitempty"`
	UserID       int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsAuthorized bool  `protobuf:"varint,3,opt,name=IsAuthorized,proto3" json:"IsAuthorized,omitempty"`
}

func (x *AlbumPageOptions) Reset() {
	*x = AlbumPageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumPageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumPageOptions) ProtoMessage() {}

func (x *AlbumPageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumPageOptions.ProtoReflect.Descriptor instead.
func (*AlbumPageOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{5}
}

func (x *AlbumPageOptions) GetAlbumID() int64 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *AlbumPageOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AlbumPageOptions) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

type FindOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	UserID       int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsAuthorized bool   `protobuf:"varint,3,opt,name=IsAuthorized,proto3" json:"IsAuthorized,omitempty"`
}

func (x *FindOptions) Reset() {
	*x = FindOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOptions) ProtoMessage() {}

func (x *FindOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOptions.ProtoReflect.Descriptor instead.
func (*FindOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{6}
}

func (x *FindOptions) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FindOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *FindOptions) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

type UserPlaylistsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *UserPlaylistsOptions) Reset() {
	*x = UserPlaylistsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPlaylistsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPlaylistsOptions) ProtoMessage() {}

func (x *UserPlaylistsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPlaylistsOptions.ProtoReflect.Descriptor instead.
func (*UserPlaylistsOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{7}
}

func (x *UserPlaylistsOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type PlaylistPageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID int64 `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
	UserID     int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *PlaylistPageOptions) Reset() {
	*x = PlaylistPageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistPageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistPageOptions) ProtoMessage() {}

func (x *PlaylistPageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistPageOptions.ProtoReflect.Descriptor instead.
func (*PlaylistPageOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{8}
}

func (x *PlaylistPageOptions) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

func (x *PlaylistPageOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Year           int64  `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Artist         string `protobuf:"bytes,4,opt,name=Artist,proto3" json:"Artist,omitempty"`
	Artwork        string `protobuf:"bytes,5,opt,name=Artwork,proto3" json:"Artwork,omitempty"`
	TracksAmount   int64  `protobuf:"varint,6,opt,name=TracksAmount,proto3" json:"TracksAmount,omitempty"`
	TracksDuration int64  `protobuf:"varint,7,opt,name=TracksDuration,proto3" json:"TracksDuration,omitempty"`
	ArtworkColor   string `protobuf:"bytes,8,opt,name=ArtworkColor,proto3" json:"ArtworkColor,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{9}
}

func (x *Album) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Album) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Album) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Album) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Album) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *Album) GetTracksAmount() int64 {
	if x != nil {
		return x.TracksAmount
	}
	return 0
}

func (x *Album) GetTracksDuration() int64 {
	if x != nil {
		return x.TracksDuration
	}
	return 0
}

func (x *Album) GetArtworkColor() string {
	if x != nil {
		return x.ArtworkColor
	}
	return ""
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Avatar string   `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Video  string   `protobuf:"bytes,4,opt,name=Video,proto3" json:"Video,omitempty"`
	Tracks []*Track `protobuf:"bytes,5,rep,name=Tracks,proto3" json:"Tracks,omitempty"`
	Albums []*Album `protobuf:"bytes,6,rep,name=Albums,proto3" json:"Albums,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{10}
}

func (x *Artist) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Artist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artist) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Artist) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *Artist) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *Artist) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title         string  `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Explicit      bool    `protobuf:"varint,3,opt,name=Explicit,proto3" json:"Explicit,omitempty"`
	Genre         string  `protobuf:"bytes,4,opt,name=Genre,proto3" json:"Genre,omitempty"`
	Number        int64   `protobuf:"varint,5,opt,name=Number,proto3" json:"Number,omitempty"`
	File          string  `protobuf:"bytes,6,opt,name=File,proto3" json:"File,omitempty"`
	ListenCount   int64   `protobuf:"varint,7,opt,name=ListenCount,proto3" json:"ListenCount,omitempty"`
	Duration      int64   `protobuf:"varint,8,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Lossless      bool    `protobuf:"varint,9,opt,name=Lossless,proto3" json:"Lossless,omitempty"`
	Album         *Album  `protobuf:"bytes,10,opt,name=Album,proto3" json:"Album,omitempty"`
	Artist        *Artist `protobuf:"bytes,11,opt,name=Artist,proto3" json:"Artist,omitempty"`
	IsInFavorites bool    `protobuf:"varint,12,opt,name=IsInFavorites,proto3" json:"IsInFavorites,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{11}
}

func (x *Track) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Track) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Track) GetExplicit() bool {
	if x != nil {
		return x.Explicit
	}
	return false
}

func (x *Track) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Track) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Track) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Track) GetListenCount() int64 {
	if x != nil {
		return x.ListenCount
	}
	return 0
}

func (x *Track) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Track) GetLossless() bool {
	if x != nil {
		return x.Lossless
	}
	return false
}

func (x *Track) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *Track) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *Track) GetIsInFavorites() bool {
	if x != nil {
		return x.IsInFavorites
	}
	return false
}

type AlbumTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Explicit      bool   `protobuf:"varint,3,opt,name=Explicit,proto3" json:"Explicit,omitempty"`
	Genre         string `protobuf:"bytes,4,opt,name=Genre,proto3" json:"Genre,omitempty"`
	Number        int64  `protobuf:"varint,5,opt,name=Number,proto3" json:"Number,omitempty"`
	File          string `protobuf:"bytes,6,opt,name=File,proto3" json:"File,omitempty"`
	ListenCount   int64  `protobuf:"varint,7,opt,name=ListenCount,proto3" json:"ListenCount,omitempty"`
	Duration      int64  `protobuf:"varint,8,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Lossless      bool   `protobuf:"varint,9,opt,name=Lossless,proto3" json:"Lossless,omitempty"`
	IsInFavorites bool   `protobuf:"varint,10,opt,name=IsInFavorites,proto3" json:"IsInFavorites,omitempty"`
}

func (x *AlbumTrack) Reset() {
	*x = AlbumTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumTrack) ProtoMessage() {}

func (x *AlbumTrack) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumTrack.ProtoReflect.Descriptor instead.
func (*AlbumTrack) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{12}
}

func (x *AlbumTrack) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AlbumTrack) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AlbumTrack) GetExplicit() bool {
	if x != nil {
		return x.Explicit
	}
	return false
}

func (x *AlbumTrack) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *AlbumTrack) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AlbumTrack) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *AlbumTrack) GetListenCount() int64 {
	if x != nil {
		return x.ListenCount
	}
	return 0
}

func (x *AlbumTrack) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AlbumTrack) GetLossless() bool {
	if x != nil {
		return x.Lossless
	}
	return false
}

func (x *AlbumTrack) GetIsInFavorites() bool {
	if x != nil {
		return x.IsInFavorites
	}
	return false
}

type PlaylistData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID   int64  `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Artwork      string `protobuf:"bytes,3,opt,name=Artwork,proto3" json:"Artwork,omitempty"`
	ArtworkColor string `protobuf:"bytes,4,opt,name=ArtworkColor,proto3" json:"ArtworkColor,omitempty"`
	IsPublic     bool   `protobuf:"varint,5,opt,name=IsPublic,proto3" json:"IsPublic,omitempty"`
	IsOwn        bool   `protobuf:"varint,6,opt,name=IsOwn,proto3" json:"IsOwn,omitempty"`
}

func (x *PlaylistData) Reset() {
	*x = PlaylistData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistData) ProtoMessage() {}

func (x *PlaylistData) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistData.ProtoReflect.Descriptor instead.
func (*PlaylistData) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{13}
}

func (x *PlaylistData) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

func (x *PlaylistData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlaylistData) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *PlaylistData) GetArtworkColor() string {
	if x != nil {
		return x.ArtworkColor
	}
	return ""
}

func (x *PlaylistData) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *PlaylistData) GetIsOwn() bool {
	if x != nil {
		return x.IsOwn
	}
	return false
}

type AlbumPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumID        int64         `protobuf:"varint,1,opt,name=AlbumID,proto3" json:"AlbumID,omitempty"`
	Title          string        `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Year           int64         `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Artwork        string        `protobuf:"bytes,4,opt,name=Artwork,proto3" json:"Artwork,omitempty"`
	ArtworkColor   string        `protobuf:"bytes,5,opt,name=ArtworkColor,proto3" json:"ArtworkColor,omitempty"`
	TracksCount    int64         `protobuf:"varint,6,opt,name=TracksCount,proto3" json:"TracksCount,omitempty"`
	TracksDuration int64         `protobuf:"varint,7,opt,name=TracksDuration,proto3" json:"TracksDuration,omitempty"`
	Artist         *Artist       `protobuf:"bytes,8,opt,name=Artist,proto3" json:"Artist,omitempty"`
	Tracks         []*AlbumTrack `protobuf:"bytes,9,rep,name=Tracks,proto3" json:"Tracks,omitempty"`
}

func (x *AlbumPageResponse) Reset() {
	*x = AlbumPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumPageResponse) ProtoMessage() {}

func (x *AlbumPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumPageResponse.ProtoReflect.Descriptor instead.
func (*AlbumPageResponse) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{14}
}

func (x *AlbumPageResponse) GetAlbumID() int64 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *AlbumPageResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AlbumPageResponse) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *AlbumPageResponse) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *AlbumPageResponse) GetArtworkColor() string {
	if x != nil {
		return x.ArtworkColor
	}
	return ""
}

func (x *AlbumPageResponse) GetTracksCount() int64 {
	if x != nil {
		return x.TracksCount
	}
	return 0
}

func (x *AlbumPageResponse) GetTracksDuration() int64 {
	if x != nil {
		return x.TracksDuration
	}
	return 0
}

func (x *AlbumPageResponse) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *AlbumPageResponse) GetTracks() []*AlbumTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type Tracks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*Track `protobuf:"bytes,1,rep,name=Tracks,proto3" json:"Tracks,omitempty"`
}

func (x *Tracks) Reset() {
	*x = Tracks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracks) ProtoMessage() {}

func (x *Tracks) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracks.ProtoReflect.Descriptor instead.
func (*Tracks) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{15}
}

func (x *Tracks) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type Albums struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Albums []*Album `protobuf:"bytes,1,rep,name=Albums,proto3" json:"Albums,omitempty"`
}

func (x *Albums) Reset() {
	*x = Albums{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Albums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Albums) ProtoMessage() {}

func (x *Albums) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Albums.ProtoReflect.Descriptor instead.
func (*Albums) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{16}
}

func (x *Albums) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

type Artists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=Artists,proto3" json:"Artists,omitempty"`
}

func (x *Artists) Reset() {
	*x = Artists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artists) ProtoMessage() {}

func (x *Artists) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artists.ProtoReflect.Descriptor instead.
func (*Artists) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{17}
}

func (x *Artists) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type PlaylistsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*PlaylistData `protobuf:"bytes,1,rep,name=Playlists,proto3" json:"Playlists,omitempty"`
}

func (x *PlaylistsData) Reset() {
	*x = PlaylistsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistsData) ProtoMessage() {}

func (x *PlaylistsData) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistsData.ProtoReflect.Descriptor instead.
func (*PlaylistsData) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{18}
}

func (x *PlaylistsData) GetPlaylists() []*PlaylistData {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type FindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks  []*Track  `protobuf:"bytes,1,rep,name=Tracks,proto3" json:"Tracks,omitempty"`
	Albums  []*Album  `protobuf:"bytes,2,rep,name=Albums,proto3" json:"Albums,omitempty"`
	Artists []*Artist `protobuf:"bytes,3,rep,name=Artists,proto3" json:"Artists,omitempty"`
}

func (x *FindResponse) Reset() {
	*x = FindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResponse) ProtoMessage() {}

func (x *FindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResponse.ProtoReflect.Descriptor instead.
func (*FindResponse) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{19}
}

func (x *FindResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *FindResponse) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

func (x *FindResponse) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type PlaylistPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistID   int64    `protobuf:"varint,1,opt,name=PlaylistID,proto3" json:"PlaylistID,omitempty"`
	Title        string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Artwork      string   `protobuf:"bytes,3,opt,name=Artwork,proto3" json:"Artwork,omitempty"`
	ArtworkColor string   `protobuf:"bytes,4,opt,name=ArtworkColor,proto3" json:"ArtworkColor,omitempty"`
	Tracks       []*Track `protobuf:"bytes,5,rep,name=Tracks,proto3" json:"Tracks,omitempty"`
	IsPublic     bool     `protobuf:"varint,6,opt,name=IsPublic,proto3" json:"IsPublic,omitempty"`
	IsOwn        bool     `protobuf:"varint,7,opt,name=IsOwn,proto3" json:"IsOwn,omitempty"`
}

func (x *PlaylistPageResponse) Reset() {
	*x = PlaylistPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistPageResponse) ProtoMessage() {}

func (x *PlaylistPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistPageResponse.ProtoReflect.Descriptor instead.
func (*PlaylistPageResponse) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{20}
}

func (x *PlaylistPageResponse) GetPlaylistID() int64 {
	if x != nil {
		return x.PlaylistID
	}
	return 0
}

func (x *PlaylistPageResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlaylistPageResponse) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *PlaylistPageResponse) GetArtworkColor() string {
	if x != nil {
		return x.ArtworkColor
	}
	return ""
}

func (x *PlaylistPageResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *PlaylistPageResponse) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *PlaylistPageResponse) GetIsOwn() bool {
	if x != nil {
		return x.IsOwn
	}
	return false
}

type IncrementListenCountEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IncrementListenCountEmpty) Reset() {
	*x = IncrementListenCountEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementListenCountEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementListenCountEmpty) ProtoMessage() {}

func (x *IncrementListenCountEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementListenCountEmpty.ProtoReflect.Descriptor instead.
func (*IncrementListenCountEmpty) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{21}
}

type AddTrackToFavoritesOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	TrackID int64 `protobuf:"varint,2,opt,name=TrackID,proto3" json:"TrackID,omitempty"`
}

func (x *AddTrackToFavoritesOptions) Reset() {
	*x = AddTrackToFavoritesOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrackToFavoritesOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrackToFavoritesOptions) ProtoMessage() {}

func (x *AddTrackToFavoritesOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrackToFavoritesOptions.ProtoReflect.Descriptor instead.
func (*AddTrackToFavoritesOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{22}
}

func (x *AddTrackToFavoritesOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddTrackToFavoritesOptions) GetTrackID() int64 {
	if x != nil {
		return x.TrackID
	}
	return 0
}

type DeleteTrackFromFavoritesOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	TrackID int64 `protobuf:"varint,2,opt,name=TrackID,proto3" json:"TrackID,omitempty"`
}

func (x *DeleteTrackFromFavoritesOptions) Reset() {
	*x = DeleteTrackFromFavoritesOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrackFromFavoritesOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrackFromFavoritesOptions) ProtoMessage() {}

func (x *DeleteTrackFromFavoritesOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrackFromFavoritesOptions.ProtoReflect.Descriptor instead.
func (*DeleteTrackFromFavoritesOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteTrackFromFavoritesOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *DeleteTrackFromFavoritesOptions) GetTrackID() int64 {
	if x != nil {
		return x.TrackID
	}
	return 0
}

type UserFavoritesOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *UserFavoritesOptions) Reset() {
	*x = UserFavoritesOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFavoritesOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFavoritesOptions) ProtoMessage() {}

func (x *UserFavoritesOptions) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFavoritesOptions.ProtoReflect.Descriptor instead.
func (*UserFavoritesOptions) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{24}
}

func (x *UserFavoritesOptions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type AddTrackToFavoritesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTrackToFavoritesResponse) Reset() {
	*x = AddTrackToFavoritesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrackToFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrackToFavoritesResponse) ProtoMessage() {}

func (x *AddTrackToFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrackToFavoritesResponse.ProtoReflect.Descriptor instead.
func (*AddTrackToFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{25}
}

type DeleteTrackFromFavoritesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTrackFromFavoritesResponse) Reset() {
	*x = DeleteTrackFromFavoritesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_music_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrackFromFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrackFromFavoritesResponse) ProtoMessage() {}

func (x *DeleteTrackFromFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_music_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrackFromFavoritesResponse.ProtoReflect.Descriptor instead.
func (*DeleteTrackFromFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_music_proto_rawDescGZIP(), []int{26}
}

var File_music_proto protoreflect.FileDescriptor

var file_music_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a,
	0x13, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x10, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x22, 0x5d, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22,
	0x2e, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x4d, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xe3,
	0x01, 0x0a, 0x05, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x1e, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x1e, 0x0a, 0x06, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x22, 0xca, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x65,
	0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x4c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x52, 0x05, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x49, 0x6e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x49, 0x73, 0x49, 0x6e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x90,
	0x02, 0x0a, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x4c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x49,
	0x73, 0x49, 0x6e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x49, 0x6e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x22, 0xa5, 0x02, 0x0a, 0x11, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x52, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x22, 0x28, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x28, 0x0a, 0x06, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x22, 0x2c, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x3c, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x22, 0x71, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x1e, 0x0a, 0x06, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73,
	0x12, 0x21, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x73, 0x4f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4f,
	0x77, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x4e, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x22,
	0x53, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe8, 0x05, 0x0a, 0x05, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x12, 0x2f, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x14, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x07, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x73, 0x12, 0x14, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x07, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x08, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x0e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x15, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x07, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x50, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x12, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x15, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a,
	0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x0c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1c, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x54, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x15, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x07, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_music_proto_rawDescOnce sync.Once
	file_music_proto_rawDescData = file_music_proto_rawDesc
)

func file_music_proto_rawDescGZIP() []byte {
	file_music_proto_rawDescOnce.Do(func() {
		file_music_proto_rawDescData = protoimpl.X.CompressGZIP(file_music_proto_rawDescData)
	})
	return file_music_proto_rawDescData
}

var file_music_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_music_proto_goTypes = []interface{}{
	(*RandomTracksOptions)(nil),              // 0: RandomTracksOptions
	(*RandomAlbumsOptions)(nil),              // 1: RandomAlbumsOptions
	(*RandomArtistsOptions)(nil),             // 2: RandomArtistsOptions
	(*IncrementListenCountOptions)(nil),      // 3: IncrementListenCountOptions
	(*ArtistProfileOptions)(nil),             // 4: ArtistProfileOptions
	(*AlbumPageOptions)(nil),                 // 5: AlbumPageOptions
	(*FindOptions)(nil),                      // 6: FindOptions
	(*UserPlaylistsOptions)(nil),             // 7: UserPlaylistsOptions
	(*PlaylistPageOptions)(nil),              // 8: PlaylistPageOptions
	(*Album)(nil),                            // 9: Album
	(*Artist)(nil),                           // 10: Artist
	(*Track)(nil),                            // 11: Track
	(*AlbumTrack)(nil),                       // 12: AlbumTrack
	(*PlaylistData)(nil),                     // 13: PlaylistData
	(*AlbumPageResponse)(nil),                // 14: AlbumPageResponse
	(*Tracks)(nil),                           // 15: Tracks
	(*Albums)(nil),                           // 16: Albums
	(*Artists)(nil),                          // 17: Artists
	(*PlaylistsData)(nil),                    // 18: PlaylistsData
	(*FindResponse)(nil),                     // 19: FindResponse
	(*PlaylistPageResponse)(nil),             // 20: PlaylistPageResponse
	(*IncrementListenCountEmpty)(nil),        // 21: IncrementListenCountEmpty
	(*AddTrackToFavoritesOptions)(nil),       // 22: AddTrackToFavoritesOptions
	(*DeleteTrackFromFavoritesOptions)(nil),  // 23: DeleteTrackFromFavoritesOptions
	(*UserFavoritesOptions)(nil),             // 24: UserFavoritesOptions
	(*AddTrackToFavoritesResponse)(nil),      // 25: AddTrackToFavoritesResponse
	(*DeleteTrackFromFavoritesResponse)(nil), // 26: DeleteTrackFromFavoritesResponse
}
var file_music_proto_depIdxs = []int32{
	11, // 0: Artist.Tracks:type_name -> Track
	9,  // 1: Artist.Albums:type_name -> Album
	9,  // 2: Track.Album:type_name -> Album
	10, // 3: Track.Artist:type_name -> Artist
	10, // 4: AlbumPageResponse.Artist:type_name -> Artist
	12, // 5: AlbumPageResponse.Tracks:type_name -> AlbumTrack
	11, // 6: Tracks.Tracks:type_name -> Track
	9,  // 7: Albums.Albums:type_name -> Album
	10, // 8: Artists.Artists:type_name -> Artist
	13, // 9: PlaylistsData.Playlists:type_name -> PlaylistData
	11, // 10: FindResponse.Tracks:type_name -> Track
	9,  // 11: FindResponse.Albums:type_name -> Album
	10, // 12: FindResponse.Artists:type_name -> Artist
	11, // 13: PlaylistPageResponse.Tracks:type_name -> Track
	0,  // 14: Music.RandomTracks:input_type -> RandomTracksOptions
	1,  // 15: Music.RandomAlbums:input_type -> RandomAlbumsOptions
	2,  // 16: Music.RandomArtists:input_type -> RandomArtistsOptions
	7,  // 17: Music.UserPlaylists:input_type -> UserPlaylistsOptions
	4,  // 18: Music.ArtistProfile:input_type -> ArtistProfileOptions
	3,  // 19: Music.IncrementListenCount:input_type -> IncrementListenCountOptions
	5,  // 20: Music.AlbumPage:input_type -> AlbumPageOptions
	8,  // 21: Music.PlaylistPage:input_type -> PlaylistPageOptions
	6,  // 22: Music.Find:input_type -> FindOptions
	22, // 23: Music.AddTrackToFavorites:input_type -> AddTrackToFavoritesOptions
	23, // 24: Music.DeleteTrackFromFavorites:input_type -> DeleteTrackFromFavoritesOptions
	24, // 25: Music.GetFavoriteTracks:input_type -> UserFavoritesOptions
	15, // 26: Music.RandomTracks:output_type -> Tracks
	16, // 27: Music.RandomAlbums:output_type -> Albums
	17, // 28: Music.RandomArtists:output_type -> Artists
	18, // 29: Music.UserPlaylists:output_type -> PlaylistsData
	10, // 30: Music.ArtistProfile:output_type -> Artist
	21, // 31: Music.IncrementListenCount:output_type -> IncrementListenCountEmpty
	14, // 32: Music.AlbumPage:output_type -> AlbumPageResponse
	20, // 33: Music.PlaylistPage:output_type -> PlaylistPageResponse
	19, // 34: Music.Find:output_type -> FindResponse
	25, // 35: Music.AddTrackToFavorites:output_type -> AddTrackToFavoritesResponse
	26, // 36: Music.DeleteTrackFromFavorites:output_type -> DeleteTrackFromFavoritesResponse
	15, // 37: Music.GetFavoriteTracks:output_type -> Tracks
	26, // [26:38] is the sub-list for method output_type
	14, // [14:26] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_music_proto_init() }
func file_music_proto_init() {
	if File_music_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_music_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomTracksOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomAlbumsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomArtistsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementListenCountOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistProfileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumPageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPlaylistsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistPageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Albums); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementListenCountEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrackToFavoritesOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTrackFromFavoritesOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFavoritesOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrackToFavoritesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_music_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTrackFromFavoritesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_music_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_music_proto_goTypes,
		DependencyIndexes: file_music_proto_depIdxs,
		MessageInfos:      file_music_proto_msgTypes,
	}.Build()
	File_music_proto = out.File
	file_music_proto_rawDesc = nil
	file_music_proto_goTypes = nil
	file_music_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MusicClient is the client API for Music service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MusicClient interface {
	RandomTracks(ctx context.Context, in *RandomTracksOptions, opts ...grpc.CallOption) (*Tracks, error)
	RandomAlbums(ctx context.Context, in *RandomAlbumsOptions, opts ...grpc.CallOption) (*Albums, error)
	RandomArtists(ctx context.Context, in *RandomArtistsOptions, opts ...grpc.CallOption) (*Artists, error)
	UserPlaylists(ctx context.Context, in *UserPlaylistsOptions, opts ...grpc.CallOption) (*PlaylistsData, error)
	ArtistProfile(ctx context.Context, in *ArtistProfileOptions, opts ...grpc.CallOption) (*Artist, error)
	IncrementListenCount(ctx context.Context, in *IncrementListenCountOptions, opts ...grpc.CallOption) (*IncrementListenCountEmpty, error)
	AlbumPage(ctx context.Context, in *AlbumPageOptions, opts ...grpc.CallOption) (*AlbumPageResponse, error)
	PlaylistPage(ctx context.Context, in *PlaylistPageOptions, opts ...grpc.CallOption) (*PlaylistPageResponse, error)
	Find(ctx context.Context, in *FindOptions, opts ...grpc.CallOption) (*FindResponse, error)
	AddTrackToFavorites(ctx context.Context, in *AddTrackToFavoritesOptions, opts ...grpc.CallOption) (*AddTrackToFavoritesResponse, error)
	DeleteTrackFromFavorites(ctx context.Context, in *DeleteTrackFromFavoritesOptions, opts ...grpc.CallOption) (*DeleteTrackFromFavoritesResponse, error)
	GetFavoriteTracks(ctx context.Context, in *UserFavoritesOptions, opts ...grpc.CallOption) (*Tracks, error)
}

type musicClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicClient(cc grpc.ClientConnInterface) MusicClient {
	return &musicClient{cc}
}

func (c *musicClient) RandomTracks(ctx context.Context, in *RandomTracksOptions, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/Music/RandomTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) RandomAlbums(ctx context.Context, in *RandomAlbumsOptions, opts ...grpc.CallOption) (*Albums, error) {
	out := new(Albums)
	err := c.cc.Invoke(ctx, "/Music/RandomAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) RandomArtists(ctx context.Context, in *RandomArtistsOptions, opts ...grpc.CallOption) (*Artists, error) {
	out := new(Artists)
	err := c.cc.Invoke(ctx, "/Music/RandomArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) UserPlaylists(ctx context.Context, in *UserPlaylistsOptions, opts ...grpc.CallOption) (*PlaylistsData, error) {
	out := new(PlaylistsData)
	err := c.cc.Invoke(ctx, "/Music/UserPlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) ArtistProfile(ctx context.Context, in *ArtistProfileOptions, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/Music/ArtistProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) IncrementListenCount(ctx context.Context, in *IncrementListenCountOptions, opts ...grpc.CallOption) (*IncrementListenCountEmpty, error) {
	out := new(IncrementListenCountEmpty)
	err := c.cc.Invoke(ctx, "/Music/IncrementListenCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) AlbumPage(ctx context.Context, in *AlbumPageOptions, opts ...grpc.CallOption) (*AlbumPageResponse, error) {
	out := new(AlbumPageResponse)
	err := c.cc.Invoke(ctx, "/Music/AlbumPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) PlaylistPage(ctx context.Context, in *PlaylistPageOptions, opts ...grpc.CallOption) (*PlaylistPageResponse, error) {
	out := new(PlaylistPageResponse)
	err := c.cc.Invoke(ctx, "/Music/PlaylistPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) Find(ctx context.Context, in *FindOptions, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/Music/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) AddTrackToFavorites(ctx context.Context, in *AddTrackToFavoritesOptions, opts ...grpc.CallOption) (*AddTrackToFavoritesResponse, error) {
	out := new(AddTrackToFavoritesResponse)
	err := c.cc.Invoke(ctx, "/Music/AddTrackToFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) DeleteTrackFromFavorites(ctx context.Context, in *DeleteTrackFromFavoritesOptions, opts ...grpc.CallOption) (*DeleteTrackFromFavoritesResponse, error) {
	out := new(DeleteTrackFromFavoritesResponse)
	err := c.cc.Invoke(ctx, "/Music/DeleteTrackFromFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) GetFavoriteTracks(ctx context.Context, in *UserFavoritesOptions, opts ...grpc.CallOption) (*Tracks, error) {
	out := new(Tracks)
	err := c.cc.Invoke(ctx, "/Music/GetFavoriteTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServer is the server API for Music service.
type MusicServer interface {
	RandomTracks(context.Context, *RandomTracksOptions) (*Tracks, error)
	RandomAlbums(context.Context, *RandomAlbumsOptions) (*Albums, error)
	RandomArtists(context.Context, *RandomArtistsOptions) (*Artists, error)
	UserPlaylists(context.Context, *UserPlaylistsOptions) (*PlaylistsData, error)
	ArtistProfile(context.Context, *ArtistProfileOptions) (*Artist, error)
	IncrementListenCount(context.Context, *IncrementListenCountOptions) (*IncrementListenCountEmpty, error)
	AlbumPage(context.Context, *AlbumPageOptions) (*AlbumPageResponse, error)
	PlaylistPage(context.Context, *PlaylistPageOptions) (*PlaylistPageResponse, error)
	Find(context.Context, *FindOptions) (*FindResponse, error)
	AddTrackToFavorites(context.Context, *AddTrackToFavoritesOptions) (*AddTrackToFavoritesResponse, error)
	DeleteTrackFromFavorites(context.Context, *DeleteTrackFromFavoritesOptions) (*DeleteTrackFromFavoritesResponse, error)
	GetFavoriteTracks(context.Context, *UserFavoritesOptions) (*Tracks, error)
}

// UnimplementedMusicServer can be embedded to have forward compatible implementations.
type UnimplementedMusicServer struct {
}

func (*UnimplementedMusicServer) RandomTracks(context.Context, *RandomTracksOptions) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomTracks not implemented")
}
func (*UnimplementedMusicServer) RandomAlbums(context.Context, *RandomAlbumsOptions) (*Albums, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomAlbums not implemented")
}
func (*UnimplementedMusicServer) RandomArtists(context.Context, *RandomArtistsOptions) (*Artists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomArtists not implemented")
}
func (*UnimplementedMusicServer) UserPlaylists(context.Context, *UserPlaylistsOptions) (*PlaylistsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPlaylists not implemented")
}
func (*UnimplementedMusicServer) ArtistProfile(context.Context, *ArtistProfileOptions) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArtistProfile not implemented")
}
func (*UnimplementedMusicServer) IncrementListenCount(context.Context, *IncrementListenCountOptions) (*IncrementListenCountEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementListenCount not implemented")
}
func (*UnimplementedMusicServer) AlbumPage(context.Context, *AlbumPageOptions) (*AlbumPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPage not implemented")
}
func (*UnimplementedMusicServer) PlaylistPage(context.Context, *PlaylistPageOptions) (*PlaylistPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaylistPage not implemented")
}
func (*UnimplementedMusicServer) Find(context.Context, *FindOptions) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedMusicServer) AddTrackToFavorites(context.Context, *AddTrackToFavoritesOptions) (*AddTrackToFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrackToFavorites not implemented")
}
func (*UnimplementedMusicServer) DeleteTrackFromFavorites(context.Context, *DeleteTrackFromFavoritesOptions) (*DeleteTrackFromFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrackFromFavorites not implemented")
}
func (*UnimplementedMusicServer) GetFavoriteTracks(context.Context, *UserFavoritesOptions) (*Tracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteTracks not implemented")
}

func RegisterMusicServer(s *grpc.Server, srv MusicServer) {
	s.RegisterService(&_Music_serviceDesc, srv)
}

func _Music_RandomTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomTracksOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).RandomTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/RandomTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).RandomTracks(ctx, req.(*RandomTracksOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_RandomAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomAlbumsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).RandomAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/RandomAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).RandomAlbums(ctx, req.(*RandomAlbumsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_RandomArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomArtistsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).RandomArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/RandomArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).RandomArtists(ctx, req.(*RandomArtistsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_UserPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPlaylistsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).UserPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/UserPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).UserPlaylists(ctx, req.(*UserPlaylistsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_ArtistProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistProfileOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).ArtistProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/ArtistProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).ArtistProfile(ctx, req.(*ArtistProfileOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_IncrementListenCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementListenCountOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).IncrementListenCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/IncrementListenCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).IncrementListenCount(ctx, req.(*IncrementListenCountOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_AlbumPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPageOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).AlbumPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/AlbumPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).AlbumPage(ctx, req.(*AlbumPageOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_PlaylistPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistPageOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).PlaylistPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/PlaylistPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).PlaylistPage(ctx, req.(*PlaylistPageOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Find(ctx, req.(*FindOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_AddTrackToFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrackToFavoritesOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).AddTrackToFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/AddTrackToFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).AddTrackToFavorites(ctx, req.(*AddTrackToFavoritesOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_DeleteTrackFromFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackFromFavoritesOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).DeleteTrackFromFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/DeleteTrackFromFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).DeleteTrackFromFavorites(ctx, req.(*DeleteTrackFromFavoritesOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_GetFavoriteTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavoritesOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).GetFavoriteTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Music/GetFavoriteTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).GetFavoriteTracks(ctx, req.(*UserFavoritesOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _Music_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Music",
	HandlerType: (*MusicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RandomTracks",
			Handler:    _Music_RandomTracks_Handler,
		},
		{
			MethodName: "RandomAlbums",
			Handler:    _Music_RandomAlbums_Handler,
		},
		{
			MethodName: "RandomArtists",
			Handler:    _Music_RandomArtists_Handler,
		},
		{
			MethodName: "UserPlaylists",
			Handler:    _Music_UserPlaylists_Handler,
		},
		{
			MethodName: "ArtistProfile",
			Handler:    _Music_ArtistProfile_Handler,
		},
		{
			MethodName: "IncrementListenCount",
			Handler:    _Music_IncrementListenCount_Handler,
		},
		{
			MethodName: "AlbumPage",
			Handler:    _Music_AlbumPage_Handler,
		},
		{
			MethodName: "PlaylistPage",
			Handler:    _Music_PlaylistPage_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Music_Find_Handler,
		},
		{
			MethodName: "AddTrackToFavorites",
			Handler:    _Music_AddTrackToFavorites_Handler,
		},
		{
			MethodName: "DeleteTrackFromFavorites",
			Handler:    _Music_DeleteTrackFromFavorites_Handler,
		},
		{
			MethodName: "GetFavoriteTracks",
			Handler:    _Music_GetFavoriteTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "music.proto",
}
