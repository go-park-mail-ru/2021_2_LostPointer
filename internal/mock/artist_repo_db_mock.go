// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/artist"
	"2021_2_LostPointer/internal/models"
	"sync"
)

// Ensure, that MockArtistRepository does implement artist.ArtistRepository.
// If this is not the case, regenerate this file with moq.
var _ artist.ArtistRepository = &MockArtistRepository{}

// MockArtistRepository is a mock implementation of artist.ArtistRepository.
//
// 	func TestSomethingThatUsesArtistRepository(t *testing.T) {
//
// 		// make and configure a mocked artist.ArtistRepository
// 		mockedArtistRepository := &MockArtistRepository{
// 			GetFunc: func(id int) (*models.Artist, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetAlbumsFunc: func(id int, amount int) ([]models.Album, error) {
// 				panic("mock out the GetAlbums method")
// 			},
// 			GetRandomFunc: func(amount int) ([]models.Artist, error) {
// 				panic("mock out the GetRandom method")
// 			},
// 			GetTracksFunc: func(id int, isAuthorized bool, amount int) ([]models.Track, error) {
// 				panic("mock out the GetTracks method")
// 			},
// 		}
//
// 		// use mockedArtistRepository in code that requires artist.ArtistRepository
// 		// and then make assertions.
//
// 	}
type MockArtistRepository struct {
	// GetFunc mocks the Get method.
	GetFunc func(id int) (*models.Artist, error)

	// GetAlbumsFunc mocks the GetAlbums method.
	GetAlbumsFunc func(id int, amount int) ([]models.Album, error)

	// GetRandomFunc mocks the GetRandom method.
	GetRandomFunc func(amount int) ([]models.Artist, error)

	// GetTracksFunc mocks the GetTracks method.
	GetTracksFunc func(id int, isAuthorized bool, amount int) ([]models.Track, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID int
		}
		// GetAlbums holds details about calls to the GetAlbums method.
		GetAlbums []struct {
			// ID is the id argument value.
			ID int
			// Amount is the amount argument value.
			Amount int
		}
		// GetRandom holds details about calls to the GetRandom method.
		GetRandom []struct {
			// Amount is the amount argument value.
			Amount int
		}
		// GetTracks holds details about calls to the GetTracks method.
		GetTracks []struct {
			// ID is the id argument value.
			ID int
			// IsAuthorized is the isAuthorized argument value.
			IsAuthorized bool
			// Amount is the amount argument value.
			Amount int
		}
	}
	lockGet       sync.RWMutex
	lockGetAlbums sync.RWMutex
	lockGetRandom sync.RWMutex
	lockGetTracks sync.RWMutex
}

// Get calls GetFunc.
func (mock *MockArtistRepository) Get(id int) (*models.Artist, error) {
	if mock.GetFunc == nil {
		panic("MockArtistRepository.GetFunc: method is nil but ArtistRepository.Get was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedArtistRepository.GetCalls())
func (mock *MockArtistRepository) GetCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetAlbums calls GetAlbumsFunc.
func (mock *MockArtistRepository) GetAlbums(id int, amount int) ([]models.Album, error) {
	if mock.GetAlbumsFunc == nil {
		panic("MockArtistRepository.GetAlbumsFunc: method is nil but ArtistRepository.GetAlbums was just called")
	}
	callInfo := struct {
		ID     int
		Amount int
	}{
		ID:     id,
		Amount: amount,
	}
	mock.lockGetAlbums.Lock()
	mock.calls.GetAlbums = append(mock.calls.GetAlbums, callInfo)
	mock.lockGetAlbums.Unlock()
	return mock.GetAlbumsFunc(id, amount)
}

// GetAlbumsCalls gets all the calls that were made to GetAlbums.
// Check the length with:
//     len(mockedArtistRepository.GetAlbumsCalls())
func (mock *MockArtistRepository) GetAlbumsCalls() []struct {
	ID     int
	Amount int
} {
	var calls []struct {
		ID     int
		Amount int
	}
	mock.lockGetAlbums.RLock()
	calls = mock.calls.GetAlbums
	mock.lockGetAlbums.RUnlock()
	return calls
}

// GetRandom calls GetRandomFunc.
func (mock *MockArtistRepository) GetRandom(amount int) ([]models.Artist, error) {
	if mock.GetRandomFunc == nil {
		panic("MockArtistRepository.GetRandomFunc: method is nil but ArtistRepository.GetRandom was just called")
	}
	callInfo := struct {
		Amount int
	}{
		Amount: amount,
	}
	mock.lockGetRandom.Lock()
	mock.calls.GetRandom = append(mock.calls.GetRandom, callInfo)
	mock.lockGetRandom.Unlock()
	return mock.GetRandomFunc(amount)
}

// GetRandomCalls gets all the calls that were made to GetRandom.
// Check the length with:
//     len(mockedArtistRepository.GetRandomCalls())
func (mock *MockArtistRepository) GetRandomCalls() []struct {
	Amount int
} {
	var calls []struct {
		Amount int
	}
	mock.lockGetRandom.RLock()
	calls = mock.calls.GetRandom
	mock.lockGetRandom.RUnlock()
	return calls
}

// GetTracks calls GetTracksFunc.
func (mock *MockArtistRepository) GetTracks(id int, isAuthorized bool, amount int) ([]models.Track, error) {
	if mock.GetTracksFunc == nil {
		panic("MockArtistRepository.GetTracksFunc: method is nil but ArtistRepository.GetTracks was just called")
	}
	callInfo := struct {
		ID           int
		IsAuthorized bool
		Amount       int
	}{
		ID:           id,
		IsAuthorized: isAuthorized,
		Amount:       amount,
	}
	mock.lockGetTracks.Lock()
	mock.calls.GetTracks = append(mock.calls.GetTracks, callInfo)
	mock.lockGetTracks.Unlock()
	return mock.GetTracksFunc(id, isAuthorized, amount)
}

// GetTracksCalls gets all the calls that were made to GetTracks.
// Check the length with:
//     len(mockedArtistRepository.GetTracksCalls())
func (mock *MockArtistRepository) GetTracksCalls() []struct {
	ID           int
	IsAuthorized bool
	Amount       int
} {
	var calls []struct {
		ID           int
		IsAuthorized bool
		Amount       int
	}
	mock.lockGetTracks.RLock()
	calls = mock.calls.GetTracks
	mock.lockGetTracks.RUnlock()
	return calls
}
