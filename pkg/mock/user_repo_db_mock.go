// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/pkg/models"
	"2021_2_LostPointer/pkg/users"
	"sync"
)

// Ensure, that MockUserRepositoryIFace does implement users.UserRepositoryIFace.
// If this is not the case, regenerate this file with moq.
var _ users.UserRepositoryIFace = &MockUserRepositoryIFace{}

// MockUserRepositoryIFace is a mock implementation of users.UserRepositoryIFace.
//
// 	func TestSomethingThatUsesUserRepositoryIFace(t *testing.T) {
//
// 		// make and configure a mocked users.UserRepositoryIFace
// 		mockedUserRepositoryIFace := &MockUserRepositoryIFace{
// 			CreateUserFunc: func(user models.User, strings ...string) (uint64, error) {
// 				panic("mock out the CreateUser method")
// 			},
// 			IsEmailUniqueFunc: func(s string) (bool, error) {
// 				panic("mock out the IsEmailUnique method")
// 			},
// 			IsNicknameUniqueFunc: func(s string) (bool, error) {
// 				panic("mock out the IsNicknameUnique method")
// 			},
// 			UserExitsFunc: func(auth models.Auth) (uint64, error) {
// 				panic("mock out the UserExits method")
// 			},
// 		}
//
// 		// use mockedUserRepositoryIFace in code that requires users.UserRepositoryIFace
// 		// and then make assertions.
//
// 	}
type MockUserRepositoryIFace struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user models.User, strings ...string) (uint64, error)

	// IsEmailUniqueFunc mocks the IsEmailUnique method.
	IsEmailUniqueFunc func(s string) (bool, error)

	// IsNicknameUniqueFunc mocks the IsNicknameUnique method.
	IsNicknameUniqueFunc func(s string) (bool, error)

	// UserExitsFunc mocks the UserExits method.
	UserExitsFunc func(auth models.Auth) (uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User models.User
			// Strings is the strings argument value.
			Strings []string
		}
		// IsEmailUnique holds details about calls to the IsEmailUnique method.
		IsEmailUnique []struct {
			// S is the s argument value.
			S string
		}
		// IsNicknameUnique holds details about calls to the IsNicknameUnique method.
		IsNicknameUnique []struct {
			// S is the s argument value.
			S string
		}
		// UserExits holds details about calls to the UserExits method.
		UserExits []struct {
			// Auth is the auth argument value.
			Auth models.Auth
		}
	}
	lockCreateUser       sync.RWMutex
	lockIsEmailUnique    sync.RWMutex
	lockIsNicknameUnique sync.RWMutex
	lockUserExits        sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *MockUserRepositoryIFace) CreateUser(user models.User, strings ...string) (uint64, error) {
	if mock.CreateUserFunc == nil {
		panic("MockUserRepositoryIFace.CreateUserFunc: method is nil but UserRepositoryIFace.CreateUser was just called")
	}
	callInfo := struct {
		User    models.User
		Strings []string
	}{
		User:    user,
		Strings: strings,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(user, strings...)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedUserRepositoryIFace.CreateUserCalls())
func (mock *MockUserRepositoryIFace) CreateUserCalls() []struct {
	User    models.User
	Strings []string
} {
	var calls []struct {
		User    models.User
		Strings []string
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// IsEmailUnique calls IsEmailUniqueFunc.
func (mock *MockUserRepositoryIFace) IsEmailUnique(s string) (bool, error) {
	if mock.IsEmailUniqueFunc == nil {
		panic("MockUserRepositoryIFace.IsEmailUniqueFunc: method is nil but UserRepositoryIFace.IsEmailUnique was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockIsEmailUnique.Lock()
	mock.calls.IsEmailUnique = append(mock.calls.IsEmailUnique, callInfo)
	mock.lockIsEmailUnique.Unlock()
	return mock.IsEmailUniqueFunc(s)
}

// IsEmailUniqueCalls gets all the calls that were made to IsEmailUnique.
// Check the length with:
//     len(mockedUserRepositoryIFace.IsEmailUniqueCalls())
func (mock *MockUserRepositoryIFace) IsEmailUniqueCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockIsEmailUnique.RLock()
	calls = mock.calls.IsEmailUnique
	mock.lockIsEmailUnique.RUnlock()
	return calls
}

// IsNicknameUnique calls IsNicknameUniqueFunc.
func (mock *MockUserRepositoryIFace) IsNicknameUnique(s string) (bool, error) {
	if mock.IsNicknameUniqueFunc == nil {
		panic("MockUserRepositoryIFace.IsNicknameUniqueFunc: method is nil but UserRepositoryIFace.IsNicknameUnique was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockIsNicknameUnique.Lock()
	mock.calls.IsNicknameUnique = append(mock.calls.IsNicknameUnique, callInfo)
	mock.lockIsNicknameUnique.Unlock()
	return mock.IsNicknameUniqueFunc(s)
}

// IsNicknameUniqueCalls gets all the calls that were made to IsNicknameUnique.
// Check the length with:
//     len(mockedUserRepositoryIFace.IsNicknameUniqueCalls())
func (mock *MockUserRepositoryIFace) IsNicknameUniqueCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockIsNicknameUnique.RLock()
	calls = mock.calls.IsNicknameUnique
	mock.lockIsNicknameUnique.RUnlock()
	return calls
}

// UserExits calls UserExitsFunc.
func (mock *MockUserRepositoryIFace) UserExits(auth models.Auth) (uint64, error) {
	if mock.UserExitsFunc == nil {
		panic("MockUserRepositoryIFace.UserExitsFunc: method is nil but UserRepositoryIFace.UserExits was just called")
	}
	callInfo := struct {
		Auth models.Auth
	}{
		Auth: auth,
	}
	mock.lockUserExits.Lock()
	mock.calls.UserExits = append(mock.calls.UserExits, callInfo)
	mock.lockUserExits.Unlock()
	return mock.UserExitsFunc(auth)
}

// UserExitsCalls gets all the calls that were made to UserExits.
// Check the length with:
//     len(mockedUserRepositoryIFace.UserExitsCalls())
func (mock *MockUserRepositoryIFace) UserExitsCalls() []struct {
	Auth models.Auth
} {
	var calls []struct {
		Auth models.Auth
	}
	mock.lockUserExits.RLock()
	calls = mock.calls.UserExits
	mock.lockUserExits.RUnlock()
	return calls
}
