// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/microservices/playlists"
	"2021_2_LostPointer/internal/microservices/playlists/proto"
	"sync"
)

// Ensure, that MockPlaylistsStorage does implement playlists.PlaylistsStorage.
// If this is not the case, regenerate this file with moq.
var _ playlists.PlaylistsStorage = &MockPlaylistsStorage{}

// MockPlaylistsStorage is a mock implementation of playlists.PlaylistsStorage.
//
// 	func TestSomethingThatUsesPlaylistsStorage(t *testing.T) {
//
// 		// make and configure a mocked playlists.PlaylistsStorage
// 		mockedPlaylistsStorage := &MockPlaylistsStorage{
// 			AddTrackFunc: func(n1 int64, n2 int64) error {
// 				panic("mock out the AddTrack method")
// 			},
// 			CreatePlaylistFunc: func(n int64, s1 string, s2 string, s3 string, b bool) (*proto.CreatePlaylistResponse, error) {
// 				panic("mock out the CreatePlaylist method")
// 			},
// 			DeletePlaylistFunc: func(n int64) error {
// 				panic("mock out the DeletePlaylist method")
// 			},
// 			DeletePlaylistArtworkFunc: func(n int64) error {
// 				panic("mock out the DeletePlaylistArtwork method")
// 			},
// 			DeleteTrackFunc: func(n1 int64, n2 int64) error {
// 				panic("mock out the DeleteTrack method")
// 			},
// 			DoesPlaylistExistFunc: func(n int64) (bool, error) {
// 				panic("mock out the DoesPlaylistExist method")
// 			},
// 			GetOldPlaylistSettingsFunc: func(n int64) (string, error) {
// 				panic("mock out the GetOldPlaylistSettings method")
// 			},
// 			IsAddedFunc: func(n1 int64, n2 int64) (bool, error) {
// 				panic("mock out the IsAdded method")
// 			},
// 			IsOwnerFunc: func(n1 int64, n2 int64) (bool, error) {
// 				panic("mock out the IsOwner method")
// 			},
// 			UpdatePlaylistAccessFunc: func(n int64, b bool) error {
// 				panic("mock out the UpdatePlaylistAccess method")
// 			},
// 			UpdatePlaylistArtworkFunc: func(n int64, s1 string, s2 string) error {
// 				panic("mock out the UpdatePlaylistArtwork method")
// 			},
// 			UpdatePlaylistTitleFunc: func(n int64, s string) error {
// 				panic("mock out the UpdatePlaylistTitle method")
// 			},
// 		}
//
// 		// use mockedPlaylistsStorage in code that requires playlists.PlaylistsStorage
// 		// and then make assertions.
//
// 	}
type MockPlaylistsStorage struct {
	// AddTrackFunc mocks the AddTrack method.
	AddTrackFunc func(n1 int64, n2 int64) error

	// CreatePlaylistFunc mocks the CreatePlaylist method.
	CreatePlaylistFunc func(n int64, s1 string, s2 string, s3 string, b bool) (*proto.CreatePlaylistResponse, error)

	// DeletePlaylistFunc mocks the DeletePlaylist method.
	DeletePlaylistFunc func(n int64) error

	// DeletePlaylistArtworkFunc mocks the DeletePlaylistArtwork method.
	DeletePlaylistArtworkFunc func(n int64) error

	// DeleteTrackFunc mocks the DeleteTrack method.
	DeleteTrackFunc func(n1 int64, n2 int64) error

	// DoesPlaylistExistFunc mocks the DoesPlaylistExist method.
	DoesPlaylistExistFunc func(n int64) (bool, error)

	// GetOldPlaylistSettingsFunc mocks the GetOldPlaylistSettings method.
	GetOldPlaylistSettingsFunc func(n int64) (string, error)

	// IsAddedFunc mocks the IsAdded method.
	IsAddedFunc func(n1 int64, n2 int64) (bool, error)

	// IsOwnerFunc mocks the IsOwner method.
	IsOwnerFunc func(n1 int64, n2 int64) (bool, error)

	// UpdatePlaylistAccessFunc mocks the UpdatePlaylistAccess method.
	UpdatePlaylistAccessFunc func(n int64, b bool) error

	// UpdatePlaylistArtworkFunc mocks the UpdatePlaylistArtwork method.
	UpdatePlaylistArtworkFunc func(n int64, s1 string, s2 string) error

	// UpdatePlaylistTitleFunc mocks the UpdatePlaylistTitle method.
	UpdatePlaylistTitleFunc func(n int64, s string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddTrack holds details about calls to the AddTrack method.
		AddTrack []struct {
			// N1 is the n1 argument value.
			N1 int64
			// N2 is the n2 argument value.
			N2 int64
		}
		// CreatePlaylist holds details about calls to the CreatePlaylist method.
		CreatePlaylist []struct {
			// N is the n argument value.
			N int64
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// S3 is the s3 argument value.
			S3 string
			// B is the b argument value.
			B bool
		}
		// DeletePlaylist holds details about calls to the DeletePlaylist method.
		DeletePlaylist []struct {
			// N is the n argument value.
			N int64
		}
		// DeletePlaylistArtwork holds details about calls to the DeletePlaylistArtwork method.
		DeletePlaylistArtwork []struct {
			// N is the n argument value.
			N int64
		}
		// DeleteTrack holds details about calls to the DeleteTrack method.
		DeleteTrack []struct {
			// N1 is the n1 argument value.
			N1 int64
			// N2 is the n2 argument value.
			N2 int64
		}
		// DoesPlaylistExist holds details about calls to the DoesPlaylistExist method.
		DoesPlaylistExist []struct {
			// N is the n argument value.
			N int64
		}
		// GetOldPlaylistSettings holds details about calls to the GetOldPlaylistSettings method.
		GetOldPlaylistSettings []struct {
			// N is the n argument value.
			N int64
		}
		// IsAdded holds details about calls to the IsAdded method.
		IsAdded []struct {
			// N1 is the n1 argument value.
			N1 int64
			// N2 is the n2 argument value.
			N2 int64
		}
		// IsOwner holds details about calls to the IsOwner method.
		IsOwner []struct {
			// N1 is the n1 argument value.
			N1 int64
			// N2 is the n2 argument value.
			N2 int64
		}
		// UpdatePlaylistAccess holds details about calls to the UpdatePlaylistAccess method.
		UpdatePlaylistAccess []struct {
			// N is the n argument value.
			N int64
			// B is the b argument value.
			B bool
		}
		// UpdatePlaylistArtwork holds details about calls to the UpdatePlaylistArtwork method.
		UpdatePlaylistArtwork []struct {
			// N is the n argument value.
			N int64
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
		// UpdatePlaylistTitle holds details about calls to the UpdatePlaylistTitle method.
		UpdatePlaylistTitle []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
	}
	lockAddTrack               sync.RWMutex
	lockCreatePlaylist         sync.RWMutex
	lockDeletePlaylist         sync.RWMutex
	lockDeletePlaylistArtwork  sync.RWMutex
	lockDeleteTrack            sync.RWMutex
	lockDoesPlaylistExist      sync.RWMutex
	lockGetOldPlaylistSettings sync.RWMutex
	lockIsAdded                sync.RWMutex
	lockIsOwner                sync.RWMutex
	lockUpdatePlaylistAccess   sync.RWMutex
	lockUpdatePlaylistArtwork  sync.RWMutex
	lockUpdatePlaylistTitle    sync.RWMutex
}

// AddTrack calls AddTrackFunc.
func (mock *MockPlaylistsStorage) AddTrack(n1 int64, n2 int64) error {
	if mock.AddTrackFunc == nil {
		panic("MockPlaylistsStorage.AddTrackFunc: method is nil but PlaylistsStorage.AddTrack was just called")
	}
	callInfo := struct {
		N1 int64
		N2 int64
	}{
		N1: n1,
		N2: n2,
	}
	mock.lockAddTrack.Lock()
	mock.calls.AddTrack = append(mock.calls.AddTrack, callInfo)
	mock.lockAddTrack.Unlock()
	return mock.AddTrackFunc(n1, n2)
}

// AddTrackCalls gets all the calls that were made to AddTrack.
// Check the length with:
//     len(mockedPlaylistsStorage.AddTrackCalls())
func (mock *MockPlaylistsStorage) AddTrackCalls() []struct {
	N1 int64
	N2 int64
} {
	var calls []struct {
		N1 int64
		N2 int64
	}
	mock.lockAddTrack.RLock()
	calls = mock.calls.AddTrack
	mock.lockAddTrack.RUnlock()
	return calls
}

// CreatePlaylist calls CreatePlaylistFunc.
func (mock *MockPlaylistsStorage) CreatePlaylist(n int64, s1 string, s2 string, s3 string, b bool) (*proto.CreatePlaylistResponse, error) {
	if mock.CreatePlaylistFunc == nil {
		panic("MockPlaylistsStorage.CreatePlaylistFunc: method is nil but PlaylistsStorage.CreatePlaylist was just called")
	}
	callInfo := struct {
		N  int64
		S1 string
		S2 string
		S3 string
		B  bool
	}{
		N:  n,
		S1: s1,
		S2: s2,
		S3: s3,
		B:  b,
	}
	mock.lockCreatePlaylist.Lock()
	mock.calls.CreatePlaylist = append(mock.calls.CreatePlaylist, callInfo)
	mock.lockCreatePlaylist.Unlock()
	return mock.CreatePlaylistFunc(n, s1, s2, s3, b)
}

// CreatePlaylistCalls gets all the calls that were made to CreatePlaylist.
// Check the length with:
//     len(mockedPlaylistsStorage.CreatePlaylistCalls())
func (mock *MockPlaylistsStorage) CreatePlaylistCalls() []struct {
	N  int64
	S1 string
	S2 string
	S3 string
	B  bool
} {
	var calls []struct {
		N  int64
		S1 string
		S2 string
		S3 string
		B  bool
	}
	mock.lockCreatePlaylist.RLock()
	calls = mock.calls.CreatePlaylist
	mock.lockCreatePlaylist.RUnlock()
	return calls
}

// DeletePlaylist calls DeletePlaylistFunc.
func (mock *MockPlaylistsStorage) DeletePlaylist(n int64) error {
	if mock.DeletePlaylistFunc == nil {
		panic("MockPlaylistsStorage.DeletePlaylistFunc: method is nil but PlaylistsStorage.DeletePlaylist was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockDeletePlaylist.Lock()
	mock.calls.DeletePlaylist = append(mock.calls.DeletePlaylist, callInfo)
	mock.lockDeletePlaylist.Unlock()
	return mock.DeletePlaylistFunc(n)
}

// DeletePlaylistCalls gets all the calls that were made to DeletePlaylist.
// Check the length with:
//     len(mockedPlaylistsStorage.DeletePlaylistCalls())
func (mock *MockPlaylistsStorage) DeletePlaylistCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockDeletePlaylist.RLock()
	calls = mock.calls.DeletePlaylist
	mock.lockDeletePlaylist.RUnlock()
	return calls
}

// DeletePlaylistArtwork calls DeletePlaylistArtworkFunc.
func (mock *MockPlaylistsStorage) DeletePlaylistArtwork(n int64) error {
	if mock.DeletePlaylistArtworkFunc == nil {
		panic("MockPlaylistsStorage.DeletePlaylistArtworkFunc: method is nil but PlaylistsStorage.DeletePlaylistArtwork was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockDeletePlaylistArtwork.Lock()
	mock.calls.DeletePlaylistArtwork = append(mock.calls.DeletePlaylistArtwork, callInfo)
	mock.lockDeletePlaylistArtwork.Unlock()
	return mock.DeletePlaylistArtworkFunc(n)
}

// DeletePlaylistArtworkCalls gets all the calls that were made to DeletePlaylistArtwork.
// Check the length with:
//     len(mockedPlaylistsStorage.DeletePlaylistArtworkCalls())
func (mock *MockPlaylistsStorage) DeletePlaylistArtworkCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockDeletePlaylistArtwork.RLock()
	calls = mock.calls.DeletePlaylistArtwork
	mock.lockDeletePlaylistArtwork.RUnlock()
	return calls
}

// DeleteTrack calls DeleteTrackFunc.
func (mock *MockPlaylistsStorage) DeleteTrack(n1 int64, n2 int64) error {
	if mock.DeleteTrackFunc == nil {
		panic("MockPlaylistsStorage.DeleteTrackFunc: method is nil but PlaylistsStorage.DeleteTrack was just called")
	}
	callInfo := struct {
		N1 int64
		N2 int64
	}{
		N1: n1,
		N2: n2,
	}
	mock.lockDeleteTrack.Lock()
	mock.calls.DeleteTrack = append(mock.calls.DeleteTrack, callInfo)
	mock.lockDeleteTrack.Unlock()
	return mock.DeleteTrackFunc(n1, n2)
}

// DeleteTrackCalls gets all the calls that were made to DeleteTrack.
// Check the length with:
//     len(mockedPlaylistsStorage.DeleteTrackCalls())
func (mock *MockPlaylistsStorage) DeleteTrackCalls() []struct {
	N1 int64
	N2 int64
} {
	var calls []struct {
		N1 int64
		N2 int64
	}
	mock.lockDeleteTrack.RLock()
	calls = mock.calls.DeleteTrack
	mock.lockDeleteTrack.RUnlock()
	return calls
}

// DoesPlaylistExist calls DoesPlaylistExistFunc.
func (mock *MockPlaylistsStorage) DoesPlaylistExist(n int64) (bool, error) {
	if mock.DoesPlaylistExistFunc == nil {
		panic("MockPlaylistsStorage.DoesPlaylistExistFunc: method is nil but PlaylistsStorage.DoesPlaylistExist was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockDoesPlaylistExist.Lock()
	mock.calls.DoesPlaylistExist = append(mock.calls.DoesPlaylistExist, callInfo)
	mock.lockDoesPlaylistExist.Unlock()
	return mock.DoesPlaylistExistFunc(n)
}

// DoesPlaylistExistCalls gets all the calls that were made to DoesPlaylistExist.
// Check the length with:
//     len(mockedPlaylistsStorage.DoesPlaylistExistCalls())
func (mock *MockPlaylistsStorage) DoesPlaylistExistCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockDoesPlaylistExist.RLock()
	calls = mock.calls.DoesPlaylistExist
	mock.lockDoesPlaylistExist.RUnlock()
	return calls
}

// GetOldPlaylistSettings calls GetOldPlaylistSettingsFunc.
func (mock *MockPlaylistsStorage) GetOldPlaylistSettings(n int64) (string, error) {
	if mock.GetOldPlaylistSettingsFunc == nil {
		panic("MockPlaylistsStorage.GetOldPlaylistSettingsFunc: method is nil but PlaylistsStorage.GetOldPlaylistSettings was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetOldPlaylistSettings.Lock()
	mock.calls.GetOldPlaylistSettings = append(mock.calls.GetOldPlaylistSettings, callInfo)
	mock.lockGetOldPlaylistSettings.Unlock()
	return mock.GetOldPlaylistSettingsFunc(n)
}

// GetOldPlaylistSettingsCalls gets all the calls that were made to GetOldPlaylistSettings.
// Check the length with:
//     len(mockedPlaylistsStorage.GetOldPlaylistSettingsCalls())
func (mock *MockPlaylistsStorage) GetOldPlaylistSettingsCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetOldPlaylistSettings.RLock()
	calls = mock.calls.GetOldPlaylistSettings
	mock.lockGetOldPlaylistSettings.RUnlock()
	return calls
}

// IsAdded calls IsAddedFunc.
func (mock *MockPlaylistsStorage) IsAdded(n1 int64, n2 int64) (bool, error) {
	if mock.IsAddedFunc == nil {
		panic("MockPlaylistsStorage.IsAddedFunc: method is nil but PlaylistsStorage.IsAdded was just called")
	}
	callInfo := struct {
		N1 int64
		N2 int64
	}{
		N1: n1,
		N2: n2,
	}
	mock.lockIsAdded.Lock()
	mock.calls.IsAdded = append(mock.calls.IsAdded, callInfo)
	mock.lockIsAdded.Unlock()
	return mock.IsAddedFunc(n1, n2)
}

// IsAddedCalls gets all the calls that were made to IsAdded.
// Check the length with:
//     len(mockedPlaylistsStorage.IsAddedCalls())
func (mock *MockPlaylistsStorage) IsAddedCalls() []struct {
	N1 int64
	N2 int64
} {
	var calls []struct {
		N1 int64
		N2 int64
	}
	mock.lockIsAdded.RLock()
	calls = mock.calls.IsAdded
	mock.lockIsAdded.RUnlock()
	return calls
}

// IsOwner calls IsOwnerFunc.
func (mock *MockPlaylistsStorage) IsOwner(n1 int64, n2 int64) (bool, error) {
	if mock.IsOwnerFunc == nil {
		panic("MockPlaylistsStorage.IsOwnerFunc: method is nil but PlaylistsStorage.IsOwner was just called")
	}
	callInfo := struct {
		N1 int64
		N2 int64
	}{
		N1: n1,
		N2: n2,
	}
	mock.lockIsOwner.Lock()
	mock.calls.IsOwner = append(mock.calls.IsOwner, callInfo)
	mock.lockIsOwner.Unlock()
	return mock.IsOwnerFunc(n1, n2)
}

// IsOwnerCalls gets all the calls that were made to IsOwner.
// Check the length with:
//     len(mockedPlaylistsStorage.IsOwnerCalls())
func (mock *MockPlaylistsStorage) IsOwnerCalls() []struct {
	N1 int64
	N2 int64
} {
	var calls []struct {
		N1 int64
		N2 int64
	}
	mock.lockIsOwner.RLock()
	calls = mock.calls.IsOwner
	mock.lockIsOwner.RUnlock()
	return calls
}

// UpdatePlaylistAccess calls UpdatePlaylistAccessFunc.
func (mock *MockPlaylistsStorage) UpdatePlaylistAccess(n int64, b bool) error {
	if mock.UpdatePlaylistAccessFunc == nil {
		panic("MockPlaylistsStorage.UpdatePlaylistAccessFunc: method is nil but PlaylistsStorage.UpdatePlaylistAccess was just called")
	}
	callInfo := struct {
		N int64
		B bool
	}{
		N: n,
		B: b,
	}
	mock.lockUpdatePlaylistAccess.Lock()
	mock.calls.UpdatePlaylistAccess = append(mock.calls.UpdatePlaylistAccess, callInfo)
	mock.lockUpdatePlaylistAccess.Unlock()
	return mock.UpdatePlaylistAccessFunc(n, b)
}

// UpdatePlaylistAccessCalls gets all the calls that were made to UpdatePlaylistAccess.
// Check the length with:
//     len(mockedPlaylistsStorage.UpdatePlaylistAccessCalls())
func (mock *MockPlaylistsStorage) UpdatePlaylistAccessCalls() []struct {
	N int64
	B bool
} {
	var calls []struct {
		N int64
		B bool
	}
	mock.lockUpdatePlaylistAccess.RLock()
	calls = mock.calls.UpdatePlaylistAccess
	mock.lockUpdatePlaylistAccess.RUnlock()
	return calls
}

// UpdatePlaylistArtwork calls UpdatePlaylistArtworkFunc.
func (mock *MockPlaylistsStorage) UpdatePlaylistArtwork(n int64, s1 string, s2 string) error {
	if mock.UpdatePlaylistArtworkFunc == nil {
		panic("MockPlaylistsStorage.UpdatePlaylistArtworkFunc: method is nil but PlaylistsStorage.UpdatePlaylistArtwork was just called")
	}
	callInfo := struct {
		N  int64
		S1 string
		S2 string
	}{
		N:  n,
		S1: s1,
		S2: s2,
	}
	mock.lockUpdatePlaylistArtwork.Lock()
	mock.calls.UpdatePlaylistArtwork = append(mock.calls.UpdatePlaylistArtwork, callInfo)
	mock.lockUpdatePlaylistArtwork.Unlock()
	return mock.UpdatePlaylistArtworkFunc(n, s1, s2)
}

// UpdatePlaylistArtworkCalls gets all the calls that were made to UpdatePlaylistArtwork.
// Check the length with:
//     len(mockedPlaylistsStorage.UpdatePlaylistArtworkCalls())
func (mock *MockPlaylistsStorage) UpdatePlaylistArtworkCalls() []struct {
	N  int64
	S1 string
	S2 string
} {
	var calls []struct {
		N  int64
		S1 string
		S2 string
	}
	mock.lockUpdatePlaylistArtwork.RLock()
	calls = mock.calls.UpdatePlaylistArtwork
	mock.lockUpdatePlaylistArtwork.RUnlock()
	return calls
}

// UpdatePlaylistTitle calls UpdatePlaylistTitleFunc.
func (mock *MockPlaylistsStorage) UpdatePlaylistTitle(n int64, s string) error {
	if mock.UpdatePlaylistTitleFunc == nil {
		panic("MockPlaylistsStorage.UpdatePlaylistTitleFunc: method is nil but PlaylistsStorage.UpdatePlaylistTitle was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockUpdatePlaylistTitle.Lock()
	mock.calls.UpdatePlaylistTitle = append(mock.calls.UpdatePlaylistTitle, callInfo)
	mock.lockUpdatePlaylistTitle.Unlock()
	return mock.UpdatePlaylistTitleFunc(n, s)
}

// UpdatePlaylistTitleCalls gets all the calls that were made to UpdatePlaylistTitle.
// Check the length with:
//     len(mockedPlaylistsStorage.UpdatePlaylistTitleCalls())
func (mock *MockPlaylistsStorage) UpdatePlaylistTitleCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockUpdatePlaylistTitle.RLock()
	calls = mock.calls.UpdatePlaylistTitle
	mock.lockUpdatePlaylistTitle.RUnlock()
	return calls
}
