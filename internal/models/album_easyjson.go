// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD775dbc7Decode20212LostPointerInternalModels(in *jlexer.Lexer, out *Albums) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Albums, 0, 0)
			} else {
				*out = Albums{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Album
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD775dbc7Encode20212LostPointerInternalModels(out *jwriter.Writer, in Albums) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Albums) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD775dbc7Encode20212LostPointerInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Albums) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD775dbc7Encode20212LostPointerInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Albums) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD775dbc7Decode20212LostPointerInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Albums) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD775dbc7Decode20212LostPointerInternalModels(l, v)
}
func easyjsonD775dbc7Decode20212LostPointerInternalModels1(in *jlexer.Lexer, out *AlbumPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "year":
			out.Year = int64(in.Int64())
		case "artwork":
			out.Artwork = string(in.String())
		case "tracks_count":
			out.TracksCount = int64(in.Int64())
		case "tracks_duration":
			out.TracksDuration = int64(in.Int64())
		case "artwork_color":
			out.ArtworkColor = string(in.String())
		case "artist":
			(out.Artist).UnmarshalEasyJSON(in)
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]TrackAlbum, 0, 0)
					} else {
						out.Tracks = []TrackAlbum{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TrackAlbum
					(v4).UnmarshalEasyJSON(in)
					out.Tracks = append(out.Tracks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD775dbc7Encode20212LostPointerInternalModels1(out *jwriter.Writer, in AlbumPage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Year != 0 {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Year))
	}
	if in.Artwork != "" {
		const prefix string = ",\"artwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artwork))
	}
	if in.TracksCount != 0 {
		const prefix string = ",\"tracks_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TracksCount))
	}
	if in.TracksDuration != 0 {
		const prefix string = ",\"tracks_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TracksDuration))
	}
	if in.ArtworkColor != "" {
		const prefix string = ",\"artwork_color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArtworkColor))
	}
	{
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Artist).MarshalEasyJSON(out)
	}
	if len(in.Tracks) != 0 {
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Tracks {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AlbumPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD775dbc7Encode20212LostPointerInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AlbumPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD775dbc7Encode20212LostPointerInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AlbumPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD775dbc7Decode20212LostPointerInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AlbumPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD775dbc7Decode20212LostPointerInternalModels1(l, v)
}
func easyjsonD775dbc7Decode20212LostPointerInternalModels2(in *jlexer.Lexer, out *Album) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "year":
			out.Year = int64(in.Int64())
		case "artist":
			out.Artist = string(in.String())
		case "artwork":
			out.Artwork = string(in.String())
		case "tracks_count":
			out.TracksCount = int64(in.Int64())
		case "tracks_duration":
			out.TracksDuration = int64(in.Int64())
		case "artwork_color":
			out.ArtworkColor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD775dbc7Encode20212LostPointerInternalModels2(out *jwriter.Writer, in Album) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Year != 0 {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Year))
	}
	if in.Artist != "" {
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artist))
	}
	if in.Artwork != "" {
		const prefix string = ",\"artwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artwork))
	}
	if in.TracksCount != 0 {
		const prefix string = ",\"tracks_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TracksCount))
	}
	if in.TracksDuration != 0 {
		const prefix string = ",\"tracks_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TracksDuration))
	}
	if in.ArtworkColor != "" {
		const prefix string = ",\"artwork_color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArtworkColor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Album) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD775dbc7Encode20212LostPointerInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Album) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD775dbc7Encode20212LostPointerInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Album) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD775dbc7Decode20212LostPointerInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Album) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD775dbc7Decode20212LostPointerInternalModels2(l, v)
}
