// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD4176298Decode20212LostPointerInternalModels(in *jlexer.Lexer, out *SearchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]Track, 0, 0)
					} else {
						out.Tracks = []Track{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Track
					(v1).UnmarshalEasyJSON(in)
					out.Tracks = append(out.Tracks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "albums":
			if in.IsNull() {
				in.Skip()
				out.Albums = nil
			} else {
				in.Delim('[')
				if out.Albums == nil {
					if !in.IsDelim(']') {
						out.Albums = make([]Album, 0, 0)
					} else {
						out.Albums = []Album{}
					}
				} else {
					out.Albums = (out.Albums)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Album
					(v2).UnmarshalEasyJSON(in)
					out.Albums = append(out.Albums, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "artists":
			if in.IsNull() {
				in.Skip()
				out.Artists = nil
			} else {
				in.Delim('[')
				if out.Artists == nil {
					if !in.IsDelim(']') {
						out.Artists = make([]Artist, 0, 0)
					} else {
						out.Artists = []Artist{}
					}
				} else {
					out.Artists = (out.Artists)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Artist
					(v3).UnmarshalEasyJSON(in)
					out.Artists = append(out.Artists, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298Encode20212LostPointerInternalModels(out *jwriter.Writer, in SearchResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Tracks) != 0 {
		const prefix string = ",\"tracks\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v4, v5 := range in.Tracks {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Albums) != 0 {
		const prefix string = ",\"albums\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Albums {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Artists) != 0 {
		const prefix string = ",\"artists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Artists {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298Encode20212LostPointerInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298Encode20212LostPointerInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298Decode20212LostPointerInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298Decode20212LostPointerInternalModels(l, v)
}
