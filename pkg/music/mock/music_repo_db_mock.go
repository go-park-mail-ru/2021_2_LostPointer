// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/pkg/models"
	"2021_2_LostPointer/pkg/music"
	"sync"
)

// Ensure, that MockMusicRepositoryInterface does implement music.MusicRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ music.MusicRepositoryInterface = &MockMusicRepositoryInterface{}

// MockMusicRepositoryInterface is a mock implementation of music.MusicRepositoryInterface.
//
// 	func TestSomethingThatUsesMusicRepositoryInterface(t *testing.T) {
//
// 		// make and configure a mocked music.MusicRepositoryInterface
// 		mockedMusicRepositoryInterface := &MockMusicRepositoryInterface{
// 			CreateAlbumsDefaultRequestFunc: func(amount int) string {
// 				panic("mock out the CreateAlbumsDefaultRequest method")
// 			},
// 			CreateArtistsDefaultRequestFunc: func(amount int) string {
// 				panic("mock out the CreateArtistsDefaultRequest method")
// 			},
// 			CreatePlaylistsDefaultRequestFunc: func(amount int) string {
// 				panic("mock out the CreatePlaylistsDefaultRequest method")
// 			},
// 			CreateTracksRequestWithParametersFunc: func(gettingWith uint8, parameters interface{}, distinctOn uint8) string {
// 				panic("mock out the CreateTracksRequestWithParameters method")
// 			},
// 			GetAlbumsFunc: func(request string) ([]models.Album, error) {
// 				panic("mock out the GetAlbums method")
// 			},
// 			GetArtistsFunc: func(request string) ([]models.Artist, error) {
// 				panic("mock out the GetArtists method")
// 			},
// 			GetPlaylistsFunc: func(request string) ([]models.Playlist, error) {
// 				panic("mock out the GetPlaylists method")
// 			},
// 			GetTracksFunc: func(request string) ([]models.Track, error) {
// 				panic("mock out the GetTracks method")
// 			},
// 			IsGenreExistFunc: func(genres []string) (bool, error) {
// 				panic("mock out the IsGenreExist method")
// 			},
// 		}
//
// 		// use mockedMusicRepositoryInterface in code that requires music.MusicRepositoryInterface
// 		// and then make assertions.
//
// 	}
type MockMusicRepositoryInterface struct {
	// CreateAlbumsDefaultRequestFunc mocks the CreateAlbumsDefaultRequest method.
	CreateAlbumsDefaultRequestFunc func(amount int) string

	// CreateArtistsDefaultRequestFunc mocks the CreateArtistsDefaultRequest method.
	CreateArtistsDefaultRequestFunc func(amount int) string

	// CreatePlaylistsDefaultRequestFunc mocks the CreatePlaylistsDefaultRequest method.
	CreatePlaylistsDefaultRequestFunc func(amount int) string

	// CreateTracksRequestWithParametersFunc mocks the CreateTracksRequestWithParameters method.
	CreateTracksRequestWithParametersFunc func(gettingWith uint8, parameters interface{}, distinctOn uint8) string

	// GetAlbumsFunc mocks the GetAlbums method.
	GetAlbumsFunc func(request string) ([]models.Album, error)

	// GetArtistsFunc mocks the GetArtists method.
	GetArtistsFunc func(request string) ([]models.Artist, error)

	// GetPlaylistsFunc mocks the GetPlaylists method.
	GetPlaylistsFunc func(request string) ([]models.Playlist, error)

	// GetTracksFunc mocks the GetTracks method.
	GetTracksFunc func(request string) ([]models.Track, error)

	// IsGenreExistFunc mocks the IsGenreExist method.
	IsGenreExistFunc func(genres []string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAlbumsDefaultRequest holds details about calls to the CreateAlbumsDefaultRequest method.
		CreateAlbumsDefaultRequest []struct {
			// Amount is the amount argument value.
			Amount int
		}
		// CreateArtistsDefaultRequest holds details about calls to the CreateArtistsDefaultRequest method.
		CreateArtistsDefaultRequest []struct {
			// Amount is the amount argument value.
			Amount int
		}
		// CreatePlaylistsDefaultRequest holds details about calls to the CreatePlaylistsDefaultRequest method.
		CreatePlaylistsDefaultRequest []struct {
			// Amount is the amount argument value.
			Amount int
		}
		// CreateTracksRequestWithParameters holds details about calls to the CreateTracksRequestWithParameters method.
		CreateTracksRequestWithParameters []struct {
			// GettingWith is the gettingWith argument value.
			GettingWith uint8
			// Parameters is the parameters argument value.
			Parameters interface{}
			// DistinctOn is the distinctOn argument value.
			DistinctOn uint8
		}
		// GetAlbums holds details about calls to the GetAlbums method.
		GetAlbums []struct {
			// Request is the request argument value.
			Request string
		}
		// GetArtists holds details about calls to the GetArtists method.
		GetArtists []struct {
			// Request is the request argument value.
			Request string
		}
		// GetPlaylists holds details about calls to the GetPlaylists method.
		GetPlaylists []struct {
			// Request is the request argument value.
			Request string
		}
		// GetTracks holds details about calls to the GetTracks method.
		GetTracks []struct {
			// Request is the request argument value.
			Request string
		}
		// IsGenreExist holds details about calls to the IsGenreExist method.
		IsGenreExist []struct {
			// Genres is the genres argument value.
			Genres []string
		}
	}
	lockCreateAlbumsDefaultRequest        sync.RWMutex
	lockCreateArtistsDefaultRequest       sync.RWMutex
	lockCreatePlaylistsDefaultRequest     sync.RWMutex
	lockCreateTracksRequestWithParameters sync.RWMutex
	lockGetAlbums                         sync.RWMutex
	lockGetArtists                        sync.RWMutex
	lockGetPlaylists                      sync.RWMutex
	lockGetTracks                         sync.RWMutex
	lockIsGenreExist                      sync.RWMutex
}

// CreateAlbumsDefaultRequest calls CreateAlbumsDefaultRequestFunc.
func (mock *MockMusicRepositoryInterface) CreateAlbumsDefaultRequest(amount int) string {
	if mock.CreateAlbumsDefaultRequestFunc == nil {
		panic("MockMusicRepositoryInterface.CreateAlbumsDefaultRequestFunc: method is nil but MusicRepositoryInterface.CreateAlbumsDefaultRequest was just called")
	}
	callInfo := struct {
		Amount int
	}{
		Amount: amount,
	}
	mock.lockCreateAlbumsDefaultRequest.Lock()
	mock.calls.CreateAlbumsDefaultRequest = append(mock.calls.CreateAlbumsDefaultRequest, callInfo)
	mock.lockCreateAlbumsDefaultRequest.Unlock()
	return mock.CreateAlbumsDefaultRequestFunc(amount)
}

// CreateAlbumsDefaultRequestCalls gets all the calls that were made to CreateAlbumsDefaultRequest.
// Check the length with:
//     len(mockedMusicRepositoryInterface.CreateAlbumsDefaultRequestCalls())
func (mock *MockMusicRepositoryInterface) CreateAlbumsDefaultRequestCalls() []struct {
	Amount int
} {
	var calls []struct {
		Amount int
	}
	mock.lockCreateAlbumsDefaultRequest.RLock()
	calls = mock.calls.CreateAlbumsDefaultRequest
	mock.lockCreateAlbumsDefaultRequest.RUnlock()
	return calls
}

// CreateArtistsDefaultRequest calls CreateArtistsDefaultRequestFunc.
func (mock *MockMusicRepositoryInterface) CreateArtistsDefaultRequest(amount int) string {
	if mock.CreateArtistsDefaultRequestFunc == nil {
		panic("MockMusicRepositoryInterface.CreateArtistsDefaultRequestFunc: method is nil but MusicRepositoryInterface.CreateArtistsDefaultRequest was just called")
	}
	callInfo := struct {
		Amount int
	}{
		Amount: amount,
	}
	mock.lockCreateArtistsDefaultRequest.Lock()
	mock.calls.CreateArtistsDefaultRequest = append(mock.calls.CreateArtistsDefaultRequest, callInfo)
	mock.lockCreateArtistsDefaultRequest.Unlock()
	return mock.CreateArtistsDefaultRequestFunc(amount)
}

// CreateArtistsDefaultRequestCalls gets all the calls that were made to CreateArtistsDefaultRequest.
// Check the length with:
//     len(mockedMusicRepositoryInterface.CreateArtistsDefaultRequestCalls())
func (mock *MockMusicRepositoryInterface) CreateArtistsDefaultRequestCalls() []struct {
	Amount int
} {
	var calls []struct {
		Amount int
	}
	mock.lockCreateArtistsDefaultRequest.RLock()
	calls = mock.calls.CreateArtistsDefaultRequest
	mock.lockCreateArtistsDefaultRequest.RUnlock()
	return calls
}

// CreatePlaylistsDefaultRequest calls CreatePlaylistsDefaultRequestFunc.
func (mock *MockMusicRepositoryInterface) CreatePlaylistsDefaultRequest(amount int) string {
	if mock.CreatePlaylistsDefaultRequestFunc == nil {
		panic("MockMusicRepositoryInterface.CreatePlaylistsDefaultRequestFunc: method is nil but MusicRepositoryInterface.CreatePlaylistsDefaultRequest was just called")
	}
	callInfo := struct {
		Amount int
	}{
		Amount: amount,
	}
	mock.lockCreatePlaylistsDefaultRequest.Lock()
	mock.calls.CreatePlaylistsDefaultRequest = append(mock.calls.CreatePlaylistsDefaultRequest, callInfo)
	mock.lockCreatePlaylistsDefaultRequest.Unlock()
	return mock.CreatePlaylistsDefaultRequestFunc(amount)
}

// CreatePlaylistsDefaultRequestCalls gets all the calls that were made to CreatePlaylistsDefaultRequest.
// Check the length with:
//     len(mockedMusicRepositoryInterface.CreatePlaylistsDefaultRequestCalls())
func (mock *MockMusicRepositoryInterface) CreatePlaylistsDefaultRequestCalls() []struct {
	Amount int
} {
	var calls []struct {
		Amount int
	}
	mock.lockCreatePlaylistsDefaultRequest.RLock()
	calls = mock.calls.CreatePlaylistsDefaultRequest
	mock.lockCreatePlaylistsDefaultRequest.RUnlock()
	return calls
}

// CreateTracksRequestWithParameters calls CreateTracksRequestWithParametersFunc.
func (mock *MockMusicRepositoryInterface) CreateTracksRequestWithParameters(gettingWith uint8, parameters interface{}, distinctOn uint8) string {
	if mock.CreateTracksRequestWithParametersFunc == nil {
		panic("MockMusicRepositoryInterface.CreateTracksRequestWithParametersFunc: method is nil but MusicRepositoryInterface.CreateTracksRequestWithParameters was just called")
	}
	callInfo := struct {
		GettingWith uint8
		Parameters  interface{}
		DistinctOn  uint8
	}{
		GettingWith: gettingWith,
		Parameters:  parameters,
		DistinctOn:  distinctOn,
	}
	mock.lockCreateTracksRequestWithParameters.Lock()
	mock.calls.CreateTracksRequestWithParameters = append(mock.calls.CreateTracksRequestWithParameters, callInfo)
	mock.lockCreateTracksRequestWithParameters.Unlock()
	return mock.CreateTracksRequestWithParametersFunc(gettingWith, parameters, distinctOn)
}

// CreateTracksRequestWithParametersCalls gets all the calls that were made to CreateTracksRequestWithParameters.
// Check the length with:
//     len(mockedMusicRepositoryInterface.CreateTracksRequestWithParametersCalls())
func (mock *MockMusicRepositoryInterface) CreateTracksRequestWithParametersCalls() []struct {
	GettingWith uint8
	Parameters  interface{}
	DistinctOn  uint8
} {
	var calls []struct {
		GettingWith uint8
		Parameters  interface{}
		DistinctOn  uint8
	}
	mock.lockCreateTracksRequestWithParameters.RLock()
	calls = mock.calls.CreateTracksRequestWithParameters
	mock.lockCreateTracksRequestWithParameters.RUnlock()
	return calls
}

// GetAlbums calls GetAlbumsFunc.
func (mock *MockMusicRepositoryInterface) GetAlbums(request string) ([]models.Album, error) {
	if mock.GetAlbumsFunc == nil {
		panic("MockMusicRepositoryInterface.GetAlbumsFunc: method is nil but MusicRepositoryInterface.GetAlbums was just called")
	}
	callInfo := struct {
		Request string
	}{
		Request: request,
	}
	mock.lockGetAlbums.Lock()
	mock.calls.GetAlbums = append(mock.calls.GetAlbums, callInfo)
	mock.lockGetAlbums.Unlock()
	return mock.GetAlbumsFunc(request)
}

// GetAlbumsCalls gets all the calls that were made to GetAlbums.
// Check the length with:
//     len(mockedMusicRepositoryInterface.GetAlbumsCalls())
func (mock *MockMusicRepositoryInterface) GetAlbumsCalls() []struct {
	Request string
} {
	var calls []struct {
		Request string
	}
	mock.lockGetAlbums.RLock()
	calls = mock.calls.GetAlbums
	mock.lockGetAlbums.RUnlock()
	return calls
}

// GetArtists calls GetArtistsFunc.
func (mock *MockMusicRepositoryInterface) GetArtists(request string) ([]models.Artist, error) {
	if mock.GetArtistsFunc == nil {
		panic("MockMusicRepositoryInterface.GetArtistsFunc: method is nil but MusicRepositoryInterface.GetArtists was just called")
	}
	callInfo := struct {
		Request string
	}{
		Request: request,
	}
	mock.lockGetArtists.Lock()
	mock.calls.GetArtists = append(mock.calls.GetArtists, callInfo)
	mock.lockGetArtists.Unlock()
	return mock.GetArtistsFunc(request)
}

// GetArtistsCalls gets all the calls that were made to GetArtists.
// Check the length with:
//     len(mockedMusicRepositoryInterface.GetArtistsCalls())
func (mock *MockMusicRepositoryInterface) GetArtistsCalls() []struct {
	Request string
} {
	var calls []struct {
		Request string
	}
	mock.lockGetArtists.RLock()
	calls = mock.calls.GetArtists
	mock.lockGetArtists.RUnlock()
	return calls
}

// GetPlaylists calls GetPlaylistsFunc.
func (mock *MockMusicRepositoryInterface) GetPlaylists(request string) ([]models.Playlist, error) {
	if mock.GetPlaylistsFunc == nil {
		panic("MockMusicRepositoryInterface.GetPlaylistsFunc: method is nil but MusicRepositoryInterface.GetPlaylists was just called")
	}
	callInfo := struct {
		Request string
	}{
		Request: request,
	}
	mock.lockGetPlaylists.Lock()
	mock.calls.GetPlaylists = append(mock.calls.GetPlaylists, callInfo)
	mock.lockGetPlaylists.Unlock()
	return mock.GetPlaylistsFunc(request)
}

// GetPlaylistsCalls gets all the calls that were made to GetPlaylists.
// Check the length with:
//     len(mockedMusicRepositoryInterface.GetPlaylistsCalls())
func (mock *MockMusicRepositoryInterface) GetPlaylistsCalls() []struct {
	Request string
} {
	var calls []struct {
		Request string
	}
	mock.lockGetPlaylists.RLock()
	calls = mock.calls.GetPlaylists
	mock.lockGetPlaylists.RUnlock()
	return calls
}

// GetTracks calls GetTracksFunc.
func (mock *MockMusicRepositoryInterface) GetTracks(request string) ([]models.Track, error) {
	if mock.GetTracksFunc == nil {
		panic("MockMusicRepositoryInterface.GetTracksFunc: method is nil but MusicRepositoryInterface.GetTracks was just called")
	}
	callInfo := struct {
		Request string
	}{
		Request: request,
	}
	mock.lockGetTracks.Lock()
	mock.calls.GetTracks = append(mock.calls.GetTracks, callInfo)
	mock.lockGetTracks.Unlock()
	return mock.GetTracksFunc(request)
}

// GetTracksCalls gets all the calls that were made to GetTracks.
// Check the length with:
//     len(mockedMusicRepositoryInterface.GetTracksCalls())
func (mock *MockMusicRepositoryInterface) GetTracksCalls() []struct {
	Request string
} {
	var calls []struct {
		Request string
	}
	mock.lockGetTracks.RLock()
	calls = mock.calls.GetTracks
	mock.lockGetTracks.RUnlock()
	return calls
}

// IsGenreExist calls IsGenreExistFunc.
func (mock *MockMusicRepositoryInterface) IsGenreExist(genres []string) (bool, error) {
	if mock.IsGenreExistFunc == nil {
		panic("MockMusicRepositoryInterface.IsGenreExistFunc: method is nil but MusicRepositoryInterface.IsGenreExist was just called")
	}
	callInfo := struct {
		Genres []string
	}{
		Genres: genres,
	}
	mock.lockIsGenreExist.Lock()
	mock.calls.IsGenreExist = append(mock.calls.IsGenreExist, callInfo)
	mock.lockIsGenreExist.Unlock()
	return mock.IsGenreExistFunc(genres)
}

// IsGenreExistCalls gets all the calls that were made to IsGenreExist.
// Check the length with:
//     len(mockedMusicRepositoryInterface.IsGenreExistCalls())
func (mock *MockMusicRepositoryInterface) IsGenreExistCalls() []struct {
	Genres []string
} {
	var calls []struct {
		Genres []string
	}
	mock.lockIsGenreExist.RLock()
	calls = mock.calls.IsGenreExist
	mock.lockIsGenreExist.RUnlock()
	return calls
}
