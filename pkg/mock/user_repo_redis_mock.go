// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/pkg/users"
	"sync"
)

// Ensure, that MockRedisStoreIFace does implement users.RedisStoreIFace.
// If this is not the case, regenerate this file with moq.
var _ users.RedisStoreIFace = &MockRedisStoreIFace{}

// MockRedisStoreIFace is a mock implementation of users.RedisStoreIFace.
//
// 	func TestSomethingThatUsesRedisStoreIFace(t *testing.T) {
//
// 		// make and configure a mocked users.RedisStoreIFace
// 		mockedRedisStoreIFace := &MockRedisStoreIFace{
// 			DeleteSessionFunc: func(s string)  {
// 				panic("mock out the DeleteSession method")
// 			},
// 			GetSessionUserIdFunc: func(s string) (int, error) {
// 				panic("mock out the GetSessionUserId method")
// 			},
// 			StoreSessionFunc: func(v uint64, strings ...string) (string, error) {
// 				panic("mock out the StoreSession method")
// 			},
// 		}
//
// 		// use mockedRedisStoreIFace in code that requires users.RedisStoreIFace
// 		// and then make assertions.
//
// 	}
type MockRedisStoreIFace struct {
	// DeleteSessionFunc mocks the DeleteSession method.
	DeleteSessionFunc func(s string)

	// GetSessionUserIdFunc mocks the GetSessionUserId method.
	GetSessionUserIdFunc func(s string) (int, error)

	// StoreSessionFunc mocks the StoreSession method.
	StoreSessionFunc func(v uint64, strings ...string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteSession holds details about calls to the DeleteSession method.
		DeleteSession []struct {
			// S is the s argument value.
			S string
		}
		// GetSessionUserId holds details about calls to the GetSessionUserId method.
		GetSessionUserId []struct {
			// S is the s argument value.
			S string
		}
		// StoreSession holds details about calls to the StoreSession method.
		StoreSession []struct {
			// V is the v argument value.
			V uint64
			// Strings is the strings argument value.
			Strings []string
		}
	}
	lockDeleteSession    sync.RWMutex
	lockGetSessionUserId sync.RWMutex
	lockStoreSession     sync.RWMutex
}

// DeleteSession calls DeleteSessionFunc.
func (mock *MockRedisStoreIFace) DeleteSession(s string) {
	if mock.DeleteSessionFunc == nil {
		panic("MockRedisStoreIFace.DeleteSessionFunc: method is nil but RedisStoreIFace.DeleteSession was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockDeleteSession.Lock()
	mock.calls.DeleteSession = append(mock.calls.DeleteSession, callInfo)
	mock.lockDeleteSession.Unlock()
	mock.DeleteSessionFunc(s)
}

// DeleteSessionCalls gets all the calls that were made to DeleteSession.
// Check the length with:
//     len(mockedRedisStoreIFace.DeleteSessionCalls())
func (mock *MockRedisStoreIFace) DeleteSessionCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockDeleteSession.RLock()
	calls = mock.calls.DeleteSession
	mock.lockDeleteSession.RUnlock()
	return calls
}

// GetSessionUserId calls GetSessionUserIdFunc.
func (mock *MockRedisStoreIFace) GetSessionUserId(s string) (int, error) {
	if mock.GetSessionUserIdFunc == nil {
		panic("MockRedisStoreIFace.GetSessionUserIdFunc: method is nil but RedisStoreIFace.GetSessionUserId was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetSessionUserId.Lock()
	mock.calls.GetSessionUserId = append(mock.calls.GetSessionUserId, callInfo)
	mock.lockGetSessionUserId.Unlock()
	return mock.GetSessionUserIdFunc(s)
}

// GetSessionUserIdCalls gets all the calls that were made to GetSessionUserId.
// Check the length with:
//     len(mockedRedisStoreIFace.GetSessionUserIdCalls())
func (mock *MockRedisStoreIFace) GetSessionUserIdCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetSessionUserId.RLock()
	calls = mock.calls.GetSessionUserId
	mock.lockGetSessionUserId.RUnlock()
	return calls
}

// StoreSession calls StoreSessionFunc.
func (mock *MockRedisStoreIFace) StoreSession(v uint64, strings ...string) (string, error) {
	if mock.StoreSessionFunc == nil {
		panic("MockRedisStoreIFace.StoreSessionFunc: method is nil but RedisStoreIFace.StoreSession was just called")
	}
	callInfo := struct {
		V       uint64
		Strings []string
	}{
		V:       v,
		Strings: strings,
	}
	mock.lockStoreSession.Lock()
	mock.calls.StoreSession = append(mock.calls.StoreSession, callInfo)
	mock.lockStoreSession.Unlock()
	return mock.StoreSessionFunc(v, strings...)
}

// StoreSessionCalls gets all the calls that were made to StoreSession.
// Check the length with:
//     len(mockedRedisStoreIFace.StoreSessionCalls())
func (mock *MockRedisStoreIFace) StoreSessionCalls() []struct {
	V       uint64
	Strings []string
} {
	var calls []struct {
		V       uint64
		Strings []string
	}
	mock.lockStoreSession.RLock()
	calls = mock.calls.StoreSession
	mock.lockStoreSession.RUnlock()
	return calls
}
