// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/album"
	"2021_2_LostPointer/internal/models"
	"sync"
)

// Ensure, that MockAlbumUseCase does implement album.AlbumUseCase.
// If this is not the case, regenerate this file with moq.
var _ album.AlbumUseCase = &MockAlbumUseCase{}

// MockAlbumUseCase is a mock implementation of album.AlbumUseCase.
//
// 	func TestSomethingThatUsesAlbumUseCase(t *testing.T) {
//
// 		// make and configure a mocked album.AlbumUseCase
// 		mockedAlbumUseCase := &MockAlbumUseCase{
// 			GetByArtistFunc: func(id int, amount int) ([]models.Album, *models.CustomError) {
// 				panic("mock out the GetByArtist method")
// 			},
// 			GetHomeFunc: func(amount int) ([]models.Album, *models.CustomError) {
// 				panic("mock out the GetHome method")
// 			},
// 		}
//
// 		// use mockedAlbumUseCase in code that requires album.AlbumUseCase
// 		// and then make assertions.
//
// 	}
type MockAlbumUseCase struct {
	// GetByArtistFunc mocks the GetByArtist method.
	GetByArtistFunc func(id int, amount int) ([]models.Album, *models.CustomError)

	// GetHomeFunc mocks the GetHome method.
	GetHomeFunc func(amount int) ([]models.Album, *models.CustomError)

	// calls tracks calls to the methods.
	calls struct {
		// GetByArtist holds details about calls to the GetByArtist method.
		GetByArtist []struct {
			// ID is the id argument value.
			ID int
			// Amount is the amount argument value.
			Amount int
		}
		// GetHome holds details about calls to the GetHome method.
		GetHome []struct {
			// Amount is the amount argument value.
			Amount int
		}
	}
	lockGetByArtist sync.RWMutex
	lockGetHome     sync.RWMutex
}

// GetByArtist calls GetByArtistFunc.
func (mock *MockAlbumUseCase) GetByArtist(id int, amount int) ([]models.Album, *models.CustomError) {
	if mock.GetByArtistFunc == nil {
		panic("MockAlbumUseCase.GetByArtistFunc: method is nil but AlbumUseCase.GetByArtist was just called")
	}
	callInfo := struct {
		ID     int
		Amount int
	}{
		ID:     id,
		Amount: amount,
	}
	mock.lockGetByArtist.Lock()
	mock.calls.GetByArtist = append(mock.calls.GetByArtist, callInfo)
	mock.lockGetByArtist.Unlock()
	return mock.GetByArtistFunc(id, amount)
}

// GetByArtistCalls gets all the calls that were made to GetByArtist.
// Check the length with:
//     len(mockedAlbumUseCase.GetByArtistCalls())
func (mock *MockAlbumUseCase) GetByArtistCalls() []struct {
	ID     int
	Amount int
} {
	var calls []struct {
		ID     int
		Amount int
	}
	mock.lockGetByArtist.RLock()
	calls = mock.calls.GetByArtist
	mock.lockGetByArtist.RUnlock()
	return calls
}

// GetHome calls GetHomeFunc.
func (mock *MockAlbumUseCase) GetHome(amount int) ([]models.Album, *models.CustomError) {
	if mock.GetHomeFunc == nil {
		panic("MockAlbumUseCase.GetHomeFunc: method is nil but AlbumUseCase.GetHome was just called")
	}
	callInfo := struct {
		Amount int
	}{
		Amount: amount,
	}
	mock.lockGetHome.Lock()
	mock.calls.GetHome = append(mock.calls.GetHome, callInfo)
	mock.lockGetHome.Unlock()
	return mock.GetHomeFunc(amount)
}

// GetHomeCalls gets all the calls that were made to GetHome.
// Check the length with:
//     len(mockedAlbumUseCase.GetHomeCalls())
func (mock *MockAlbumUseCase) GetHomeCalls() []struct {
	Amount int
} {
	var calls []struct {
		Amount int
	}
	mock.lockGetHome.RLock()
	calls = mock.calls.GetHome
	mock.lockGetHome.RUnlock()
	return calls
}
