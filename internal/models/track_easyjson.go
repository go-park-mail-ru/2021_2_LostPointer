// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAe118d8fDecode20212LostPointerInternalModels(in *jlexer.Lexer, out *Tracks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Tracks, 0, 0)
			} else {
				*out = Tracks{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Track
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe118d8fEncode20212LostPointerInternalModels(out *jwriter.Writer, in Tracks) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Tracks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe118d8fEncode20212LostPointerInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tracks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe118d8fEncode20212LostPointerInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tracks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe118d8fDecode20212LostPointerInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tracks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe118d8fDecode20212LostPointerInternalModels(l, v)
}
func easyjsonAe118d8fDecode20212LostPointerInternalModels1(in *jlexer.Lexer, out *TrackID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe118d8fEncode20212LostPointerInternalModels1(out *jwriter.Writer, in TrackID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrackID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe118d8fEncode20212LostPointerInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrackID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe118d8fEncode20212LostPointerInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrackID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe118d8fDecode20212LostPointerInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrackID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe118d8fDecode20212LostPointerInternalModels1(l, v)
}
func easyjsonAe118d8fDecode20212LostPointerInternalModels2(in *jlexer.Lexer, out *TrackAlbum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "explicit":
			out.Explicit = bool(in.Bool())
		case "genre":
			out.Genre = string(in.String())
		case "number":
			out.Number = int64(in.Int64())
		case "file":
			out.File = string(in.String())
		case "listen_count":
			out.ListenCount = int64(in.Int64())
		case "duration":
			out.Duration = int64(in.Int64())
		case "lossless":
			out.Lossless = bool(in.Bool())
		case "is_in_favorites":
			out.IsInFavorites = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe118d8fEncode20212LostPointerInternalModels2(out *jwriter.Writer, in TrackAlbum) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"explicit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Explicit))
	}
	if in.Genre != "" {
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		out.String(string(in.Genre))
	}
	if in.Number != 0 {
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int64(int64(in.Number))
	}
	if in.File != "" {
		const prefix string = ",\"file\":"
		out.RawString(prefix)
		out.String(string(in.File))
	}
	if in.ListenCount != 0 {
		const prefix string = ",\"listen_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ListenCount))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.Duration))
	}
	if in.Lossless {
		const prefix string = ",\"lossless\":"
		out.RawString(prefix)
		out.Bool(bool(in.Lossless))
	}
	if in.IsInFavorites {
		const prefix string = ",\"is_in_favorites\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsInFavorites))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrackAlbum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe118d8fEncode20212LostPointerInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrackAlbum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe118d8fEncode20212LostPointerInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrackAlbum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe118d8fDecode20212LostPointerInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrackAlbum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe118d8fDecode20212LostPointerInternalModels2(l, v)
}
func easyjsonAe118d8fDecode20212LostPointerInternalModels3(in *jlexer.Lexer, out *Track) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "explicit":
			out.Explicit = bool(in.Bool())
		case "genre":
			out.Genre = string(in.String())
		case "number":
			out.Number = int64(in.Int64())
		case "file":
			out.File = string(in.String())
		case "listen_count":
			out.ListenCount = int64(in.Int64())
		case "duration":
			out.Duration = int64(in.Int64())
		case "lossless":
			out.Lossless = bool(in.Bool())
		case "album":
			(out.Album).UnmarshalEasyJSON(in)
		case "artist":
			(out.Artist).UnmarshalEasyJSON(in)
		case "is_in_favorites":
			out.IsInFavorites = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe118d8fEncode20212LostPointerInternalModels3(out *jwriter.Writer, in Track) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Explicit {
		const prefix string = ",\"explicit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Explicit))
	}
	if in.Genre != "" {
		const prefix string = ",\"genre\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Genre))
	}
	if in.Number != 0 {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Number))
	}
	if in.File != "" {
		const prefix string = ",\"file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.File))
	}
	if in.ListenCount != 0 {
		const prefix string = ",\"listen_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ListenCount))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Lossless {
		const prefix string = ",\"lossless\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Lossless))
	}
	if true {
		const prefix string = ",\"album\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Album).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Artist).MarshalEasyJSON(out)
	}
	if in.IsInFavorites {
		const prefix string = ",\"is_in_favorites\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsInFavorites))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Track) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe118d8fEncode20212LostPointerInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Track) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe118d8fEncode20212LostPointerInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Track) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe118d8fDecode20212LostPointerInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Track) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe118d8fDecode20212LostPointerInternalModels3(l, v)
}
