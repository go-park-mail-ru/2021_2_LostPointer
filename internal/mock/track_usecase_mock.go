// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"2021_2_LostPointer/internal/models"
	"2021_2_LostPointer/internal/track"
	"sync"
)

// Ensure, that MockTrackUseCase does implement track.TrackUseCase.
// If this is not the case, regenerate this file with moq.
var _ track.TrackUseCase = &MockTrackUseCase{}

// MockTrackUseCase is a mock implementation of track.TrackUseCase.
//
// 	func TestSomethingThatUsesTrackUseCase(t *testing.T) {
//
// 		// make and configure a mocked track.TrackUseCase
// 		mockedTrackUseCase := &MockTrackUseCase{
// 			GetHomeFunc: func(amount int, isAuthorized bool) ([]models.Track, *models.CustomError) {
// 				panic("mock out the GetHome method")
// 			},
// 			IncrementListenCountFunc: func(n int64) *models.CustomError {
// 				panic("mock out the IncrementListenCount method")
// 			},
// 		}
//
// 		// use mockedTrackUseCase in code that requires track.TrackUseCase
// 		// and then make assertions.
//
// 	}
type MockTrackUseCase struct {
	// GetHomeFunc mocks the GetHome method.
	GetHomeFunc func(amount int, isAuthorized bool) ([]models.Track, *models.CustomError)

	// IncrementListenCountFunc mocks the IncrementListenCount method.
	IncrementListenCountFunc func(n int64) *models.CustomError

	// calls tracks calls to the methods.
	calls struct {
		// GetHome holds details about calls to the GetHome method.
		GetHome []struct {
			// Amount is the amount argument value.
			Amount int
			// IsAuthorized is the isAuthorized argument value.
			IsAuthorized bool
		}
		// IncrementListenCount holds details about calls to the IncrementListenCount method.
		IncrementListenCount []struct {
			// N is the n argument value.
			N int64
		}
	}
	lockGetHome              sync.RWMutex
	lockIncrementListenCount sync.RWMutex
}

// GetHome calls GetHomeFunc.
func (mock *MockTrackUseCase) GetHome(amount int, isAuthorized bool) ([]models.Track, *models.CustomError) {
	if mock.GetHomeFunc == nil {
		panic("MockTrackUseCase.GetHomeFunc: method is nil but TrackUseCase.GetHome was just called")
	}
	callInfo := struct {
		Amount       int
		IsAuthorized bool
	}{
		Amount:       amount,
		IsAuthorized: isAuthorized,
	}
	mock.lockGetHome.Lock()
	mock.calls.GetHome = append(mock.calls.GetHome, callInfo)
	mock.lockGetHome.Unlock()
	return mock.GetHomeFunc(amount, isAuthorized)
}

// GetHomeCalls gets all the calls that were made to GetHome.
// Check the length with:
//     len(mockedTrackUseCase.GetHomeCalls())
func (mock *MockTrackUseCase) GetHomeCalls() []struct {
	Amount       int
	IsAuthorized bool
} {
	var calls []struct {
		Amount       int
		IsAuthorized bool
	}
	mock.lockGetHome.RLock()
	calls = mock.calls.GetHome
	mock.lockGetHome.RUnlock()
	return calls
}

// IncrementListenCount calls IncrementListenCountFunc.
func (mock *MockTrackUseCase) IncrementListenCount(n int64) *models.CustomError {
	if mock.IncrementListenCountFunc == nil {
		panic("MockTrackUseCase.IncrementListenCountFunc: method is nil but TrackUseCase.IncrementListenCount was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockIncrementListenCount.Lock()
	mock.calls.IncrementListenCount = append(mock.calls.IncrementListenCount, callInfo)
	mock.lockIncrementListenCount.Unlock()
	return mock.IncrementListenCountFunc(n)
}

// IncrementListenCountCalls gets all the calls that were made to IncrementListenCount.
// Check the length with:
//     len(mockedTrackUseCase.IncrementListenCountCalls())
func (mock *MockTrackUseCase) IncrementListenCountCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockIncrementListenCount.RLock()
	calls = mock.calls.IncrementListenCount
	mock.lockIncrementListenCount.RUnlock()
	return calls
}
